version: 2.1
commands:
  persist_docs:
    parameters:
      project_name:
        type: string
      relative_path:
        type: string
    steps:
      - run:
          name: Copy to tmp directory
          command: |
            mkdir -p /tmp/workspace/docs/<<parameters.project_name>>/
            cp -r ./<<parameters.relative_path>>/* /tmp/workspace/docs/<<parameters.project_name>>/
      - persist_to_workspace:
          root: /tmp/workspace/
          paths: docs/<<parameters.project_name>>/
  polymetis_tests:
    steps:
      - run:
          name: Run polymetis pytest
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local

            Xvfb :100 -screen 0 1024x768x24 &
            DISPLAY=:100 pytest ./polymetis/polymetis/tests/python
            pkill Xvfb
      - run:
          name: Run polymetis C++ unit tests
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local

            export PATH=$PWD/polymetis/polymetis/build/:$PATH

            python ./polymetis/polymetis/tests/cpp/test_server.py
      - run:
          name: Run Allegro Hand client unit tests
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local
            test_allegro_hand_client
      - run:
          name: Run integration tests (empty client)
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local
            ./polymetis/tests/test_empty_statistics_client.sh
      - run:
          name: Run integration tests (mocked hardware client)
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local
            ./polymetis/tests/test_mocked_hardware_client.sh
      - run:
          name: Run integration tests (simulation)
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local
            ./polymetis/tests/test_simulation.sh
  polymetis_local_build:
    steps:
      - run:
          name: Initialize Git submodules
          command: |
            git submodule update --init --recursive
      - run:
          name: Install
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local
            cd polymetis/polymetis

            export BUILD_DOCS="ON"
            ./install.sh
      - polymetis_tests
      - run:
          name: Generate documentation
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local

            cd ./polymetis/docs/
            make html

            # tar to save as artifact
            tar -cvf html.tar ./_build/html
      - persist_docs:
          project_name: polymetis
          relative_path: polymetis/docs/_build/html
      - store_artifacts:
          path: ./polymetis/docs/html.tar
          destination: autogen_docs
  polymetis_build_conda_pkg:
    steps:
      - run:
          name: Update submodules
          command: git submodule update --init --recursive
      - run:
          name: Create Conda environment
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            [ -d /opt/conda/envs/polymetis-local ] || mamba create -n polymetis-local python=3.8
      - run:
          name: Create Conda package
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local
            conda mambabuild -c pytorch -c fair-robotics -c aihabitat -c conda-forge polymetis/polymetis/conda/conda_recipe
      - store_artifacts:
          path: /opt/conda/conda-bld/linux-64/
          destination: conda_pkg
      - run:
          name: Update local channel
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local
            cd ./polymetis/polymetis/conda/
            PKG_PATH="/opt/conda/conda-bld/linux-64/polymetis*.tar.bz2" ./build_conda_package.sh
      - run:
          name: Install from conda
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local
            mamba install --override-channels -c file://$(eval pwd)/polymetis/polymetis/conda/channel -c pytorch -c fair-robotics -c aihabitat -c conda-forge polymetis -y
      - run:
          name: Run libfranka test
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            conda activate polymetis-local
            ./polymetis/polymetis/tests/test_libfranka_installation.sh
      - polymetis_tests
      - run:
          name: Upload to Anaconda Cloud (if on main branch)
          command: |
            if [[ $(git symbolic-ref -q --short HEAD) = "main" ]]
              then
                . /opt/conda/etc/profile.d/conda.sh
                conda activate polymetis-local
                mamba install anaconda-client
                anaconda login --username $ANACONDA_USER --password $ANACONDA_PASSWORD
                anaconda upload --user fair-robotics --skip /opt/conda/conda-bld/linux-64/polymetis*.tar.bz2
            fi


jobs:
  minecraft:
    machine:
      image: ubuntu-2004:202104-01
    resource_class: gpu.nvidia.small
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y git python3 python3-pip apt-transport-https ca-certificates curl gnupg-agent software-properties-common
      - checkout

      - run:
          name: Get branch env variable
          command: |
            echo 'export DOCKER_BUILD_ARGS="--build-arg current_branch=${CIRCLE_BRANCH} --build-arg AWS_ACCESS_KEY_ID=${AWS_S3_ACCESS_KEY_ID} --build-arg AWS_SECRET_ACCESS_KEY=${AWS_S3_SECRET_ACCESS_KEY}"' >> $BASH_ENV
            echo 'export CURRENT_BRANCH="${CIRCLE_BRANCH}"' >> $BASH_ENV

      - run:
          name: Build docker containers
          command: make -C tools/docker build

      - run:
          name: CraftAssist Python unit tests
          command: |
              docker run --name mc-tests -v $(pwd):/shared -w /fairo --entrypoint="/bin/bash" craftassist -c "python3 setup.py develop && /fairo/.circleci/craftassist_tests.sh"
              pip3 install codecov
              export CODECOV_TOKEN='6cff57e1-08ce-4d98-8f28-63797d90107f'
              codecov -n "craftassist tests" -f *.xml || echo "Codecov did not collect coverage reports"
          no_output_timeout: 50m

      - run:
          name: Push versioned docker containers
          command: |
            pip3 install $(cat conda.txt | grep -e awscli)
            tools/docker/login.sh
            make -C tools/docker push-versioned
      - run:
          name: Generate documentation
          command: |
            docker run -v $PWD:/shared -w /shared --entrypoint="/bin/bash" craftassist -c "python3 setup.py develop && cd droidlet/docs && python3 -m pip install -r requirements.txt && make html"
      - persist_docs:
          project_name: droidlet
          relative_path: droidlet/docs/build/html

  locobot:
    machine:
      image: ubuntu-2004:202104-01
    resource_class: gpu.nvidia.small
    steps:
    - checkout
    - run:
        name: Setup environment
        command: |
          set -ex

          curl -L https://packagecloud.io/circleci/trusty/gpgkey | sudo apt-key add -
          curl -L https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -

          sudo apt update

          sudo apt install \
              python3 python3-pip \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg-agent \
              software-properties-common

          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo \
            "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io

          # Add the package repositories
          distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
             && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \
                && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list

          sudo apt-get update
          sudo apt-get install -y nvidia-docker2
          sudo systemctl restart docker

          DRIVER_FN="NVIDIA-Linux-x86_64-470.74.run"
          wget "https://us.download.nvidia.com/XFree86/Linux-x86_64/470.74/$DRIVER_FN"
          sudo /bin/bash "$DRIVER_FN" -s --no-drm || (sudo cat /var/log/nvidia-installer.log && false)
          nvidia-smi

    - run:
        name: Pull docker image
        command: |
          set -ex
          export DOCKER_IMAGE=theh1ghwayman/locobot-assistant:11.0
          echo Pulling docker image $DOCKER_IMAGE
          docker pull $DOCKER_IMAGE >/dev/null

    - run:
        name: Build and run tests
        no_output_timeout: 50m
        command: |
          set -ex

          cd ${HOME}/project/
          export DOCKER_IMAGE=theh1ghwayman/locobot-assistant:11.0
          mkdir shared
          docker run --gpus all --name loco-img --ipc=host -v $(pwd):/shared -w /shared ${DOCKER_IMAGE} .circleci/locobot_tests.sh
          pip3 install codecov
          export CODECOV_TOKEN='6cff57e1-08ce-4d98-8f28-63797d90107f'
          codecov -n "locobot tests" -f test*.xml || echo "Codecov did not collect coverage reports"
  
  polymetis-local-ubuntu-18:
    docker:
      - image: fairrobotics/kuka-workspace:ubuntu-18
        auth:
          username: yixinlin
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          key: deps9-{{ .Branch }}-ubuntu-18-{{ checksum "polymetis/polymetis/environment.yml" }}
      - run:
          name: Create Conda environment
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            [ -d /opt/conda/envs/polymetis-local ] || mamba env create -f polymetis/polymetis/environment.yml
      - save_cache:
          key: deps9-{{ .Branch }}-ubuntu-18-{{ checksum "polymetis/polymetis/environment.yml" }}
          paths:
            - "/opt/conda/envs/polymetis-local"
      - polymetis_local_build
  polymetis-local-ubuntu-20:
    docker:
      - image: fairrobotics/kuka-workspace:ubuntu-20
        auth:
          username: yixinlin
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          key: deps9-{{ .Branch }}-ubuntu-20-{{ checksum "polymetis/polymetis/environment.yml" }}
      - run:
          name: Create Conda environment
          command: |
            . /opt/conda/etc/profile.d/conda.sh
            [ -d /opt/conda/envs/polymetis-local ] || mamba env create -f polymetis/polymetis/environment.yml
      - save_cache:
          key: deps9-{{ .Branch }}-ubuntu-20-{{ checksum "polymetis/polymetis/environment.yml" }}
          paths:
            - "/opt/conda/envs/polymetis-local"
      - polymetis_local_build
  polymetis-conda-ubuntu-18:
    docker:
      - image: fairrobotics/kuka-workspace:ubuntu-18
        auth:
          username: yixinlin
          password: $DOCKERHUB_PASSWORD
    resource_class: medium+
    steps:
      - checkout
      - polymetis_build_conda_pkg
  polymetis-conda-ubuntu-20:
    docker:
      - image: fairrobotics/kuka-workspace:ubuntu-20
        auth:
          username: yixinlin
          password: $DOCKERHUB_PASSWORD
    resource_class: medium+
    steps:
      - checkout
      - polymetis_build_conda_pkg
  formatting:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - add_ssh_keys:  # read & write access for bot
          fingerprints:
            - "6b:61:ef:6e:de:62:db:11:5e:f0:90:39:02:49:63:73"
      - run:
          name: Run black formatting
          command: |
            pip install black
            ./tools/codetools/check_and_fix_black_failures.sh --ci
      - run:
          name: Run clang-format
          command: |
            cd ./polymetis
            pip install clang-format
            export PATH=$PATH
            ./scripts/format_cpp.sh check all
  mrp:
    docker:
      - image: python:3.8
    steps:
      - checkout
      - run:
          name: Install Conda
          command: |
            wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
            bash miniconda.sh -b -p /opt/conda
            echo 'export PATH=/opt/conda/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install PyTest
          command: pip install pytest
      - run:
          name: Install MRP
          command: python3 -m pip install ./mrp
      - run:
          name: Run PyTest
          command: pytest -s -vvv ./mrp
  mrp-lint:
    docker:
      - image: python:3.8
    steps:
      - checkout
      - run:
          name: Install Deps
          command: pip install -U black flake8
      - run:
          name: flake8
          command: cd mrp ; flake8
      - run:
          name: black
          command: black --check ./mrp
  fairomsg:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run: pip install ./msg
      - run: pip install pytest && pytest ./msg/tests
  update-docs:
    docker:
      - image: cimg/node:current
    steps:
      - attach_workspace:
          at: /tmp/workspace/
      - checkout
      - run:
          name: Copy all docs into repo
          command: |
            cp -r /tmp/workspace/docs/* docs/
      - run:
          name: Install gh-pages utility
          command: |
            npm install -g gh-pages
            git config user.email "bot@fb.com"
            git config user.name "bot"
      - add_ssh_keys:  # read & write access for bot
          fingerprints:
            - "6b:61:ef:6e:de:62:db:11:5e:f0:90:39:02:49:63:73"
      - run:
          name: Publish docs to gh-pages branch
          command: CACHE_DIR=~/cache gh-pages --dotfiles --message "[skip ci] Updates" --dist docs/

  fairotag:
    docker:
      - image: continuumio/miniconda3
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "perception/fairotag/environment.yml" }}
      - run:
          name: Setup env
          command: |
            apt-get update
            apt-get install -y build-essential libgl1-mesa-dev
            [ -d ~/testenv ] || conda env create -f perception/fairotag/environment.yml -p ~/testenv
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "perception/fairotag/environment.yml" }}
          paths:
            - "~/testenv"
            - "/usr/lib"
      - run:
          name: Run tests
          command: |
            conda init bash
            source ~/.bashrc
            conda activate ~/testenv
            cd perception/fairotag
            pip install -e .
            pytest
  eyehandcal:
    docker:
      - image: continuumio/miniconda3
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "perception/sandbox/eyehandcal/environment.yml" }}
      - run:
          name: Setup env
          command: |
            apt-get update
            apt-get install -y build-essential libgl1-mesa-dev
            [ -d ~/testenv ] || conda env create -f perception/sandbox/eyehandcal/environment.yml -p ~/testenv
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "perception/sandbox/eyehandcal/environment.yml" }}
          paths:
            - "~/testenv"
      - run:
          name: Run tests
          command: |
            conda init bash
            source ~/.bashrc
            conda activate ~/testenv
            cd perception/sandbox/eyehandcal
            pip install -e .
            pytest tests
  polygrasp:
    machine:
      image: ubuntu-2004-cuda-11.4:202110-01
    resource_class: gpu.nvidia.small
    steps:
      - checkout
      - run:
          name: Initialize Git submodules
          command: |
            git submodule update --init --recursive ./perception/sandbox/polygrasp/
      - run:
          name: Delete extraneous circleci stuff
          command: |
            rm -rf .circleci
      - run:
          name: Install Miniconda3
          command: |
            wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
            /bin/bash ~/miniconda.sh -b -p ~/miniconda3 && \
            rm ~/miniconda.sh && \
            sudo ln -s ~/miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
            echo ". ~/miniconda3/etc/profile.d/conda.sh" >> ~/.bashrc && \
            echo "conda activate base" >> ~/.bashrc
      - restore_cache:
          key: deps9-{{ checksum "perception/sandbox/polygrasp/msetup.py" }}-{{ checksum "perception/sandbox/polygrasp/third_party/graspnet-baseline/environment.yml" }}-{{ checksum "perception/sandbox/polygrasp/third_party/UnseenObjectClustering/environment.yml" }}
      - run:
          name: Install mamba
          command: |
            . ~/miniconda3/bin/activate
            conda install -y -c conda-forge mamba -n base
      - run:
          name: Install mrp
          command: |
            . ~/miniconda3/bin/activate
            conda activate base
            pip install -e ./mrp
      - run:
          name: Create conda environments
          command: |
            . ~/miniconda3/bin/activate
            conda activate base

            cd perception/sandbox/polygrasp/
            export CUDA_HOME=/usr/local/cuda
            mrp up --norun --verbose
      - run:
          name: Download parameters
          command: |
            . ~/miniconda3/bin/activate
            conda activate base
            pip install gdown

            cd perception/sandbox/polygrasp/
            gdown --id 1O-ymMGD_qDEtYxRU19zSv17Lgg6fSinQ -O ./third_party/UnseenObjectClustering/data/
            gdown --id 1hd0G8LN6tRpi4742XOTEisbTXNZ-1jmk -O ./third_party/graspnet-baseline/data/graspnet/

            cd third_party/UnseenObjectClustering/data/
            unzip ./checkpoints.zip
      - save_cache:
          key: deps9-{{ checksum "perception/sandbox/polygrasp/msetup.py" }}-{{ checksum "perception/sandbox/polygrasp/third_party/graspnet-baseline/environment.yml" }}-{{ checksum "perception/sandbox/polygrasp/third_party/UnseenObjectClustering/environment.yml" }}
          paths:
            - "/home/circleci/miniconda3/envs"
            - "/home/circleci/project/perception/sandbox/polygrasp/third_party/UnseenObjectClustering/data/"
            - "/home/circleci/project/perception/sandbox/polygrasp/third_party/graspnet-baseline/data/"
      - run:
          name: Run test
          command: |
            # Fix QT load issue: https://forum.qt.io/topic/119109/using-pyqt5-with-opencv-python-cv2-causes-error-could-not-load-qt-platform-plugin-xcb-even-though-it-was-found/
            rm -rf /home/circleci/miniconda3/envs/mrp_polygrasp/lib/python3.8/site-packages/cv2/qt/plugins/platforms

            conda activate mrp_polygrasp
            cd perception/sandbox/polygrasp/

            mrp up grasp_server segmentation_server --nobuild
            python scripts/run_grasp.py robot=robot_mock cam=cam_mock num_bin_shifts=1 num_grasps_per_bin_shift=1


workflows:
  build:
    jobs:
      - minecraft
      - locobot
      - polymetis-local-ubuntu-18
      - polymetis-local-ubuntu-20
      - polymetis-conda-ubuntu-18
      - polymetis-conda-ubuntu-20
      - formatting
      - mrp
      - mrp-lint
      - fairotag
      - fairomsg
      - eyehandcal
      - polygrasp
      - update-docs:
          requires:
            - polymetis-local-ubuntu-20
            - minecraft
          filters:
            branches:
              only: main
