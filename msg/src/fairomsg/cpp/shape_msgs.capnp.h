// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: shape_msgs.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error                                                                         \
    "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "geometry_msgs.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c3765e3fa5ab25e0);
CAPNP_DECLARE_SCHEMA(ea85b2fdabd318a9);
CAPNP_DECLARE_SCHEMA(b387280c4001ecbf);
CAPNP_DECLARE_SCHEMA(d8943cb5e3be8b29);
CAPNP_DECLARE_SCHEMA(cd09701db89b40c0);
CAPNP_DECLARE_SCHEMA(cbe99909f506ba04);
CAPNP_DECLARE_SCHEMA(cbd686783ba704f7);
CAPNP_DECLARE_SCHEMA(cd14e0afae520749);
CAPNP_DECLARE_SCHEMA(f4d55664ccfcc2e7);
CAPNP_DECLARE_SCHEMA(d9c44c5d658e66ab);
CAPNP_DECLARE_SCHEMA(dfb14e78908bc7be);
CAPNP_DECLARE_SCHEMA(8124cc4ea6d55a28);
CAPNP_DECLARE_SCHEMA(9b75adbd7536e2f1);
CAPNP_DECLARE_SCHEMA(c0f8a348d4b82d31);
CAPNP_DECLARE_SCHEMA(e09d31704ea865d6);
CAPNP_DECLARE_SCHEMA(f79f54027a4fbd16);

} // namespace schemas
} // namespace capnp

namespace mrp {
namespace shape {

struct Mesh {
  Mesh() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3765e3fa5ab25e0, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct MeshTriangle {
  MeshTriangle() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea85b2fdabd318a9, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Plane {
  Plane() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b387280c4001ecbf, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct SolidPrimitive {
  SolidPrimitive() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr ::uint8_t K_BOX = 1u;
  static constexpr ::uint8_t K_SPHERE = 2u;
  static constexpr ::uint8_t K_CYLINDER = 3u;
  static constexpr ::uint8_t K_CONE = 4u;
  static constexpr ::uint8_t K_BOX_X = 0u;
  static constexpr ::uint8_t K_BOX_Y = 1u;
  static constexpr ::uint8_t K_BOX_Z = 2u;
  static constexpr ::uint8_t K_SPHERE_RADIUS = 0u;
  static constexpr ::uint8_t K_CYLINDER_HEIGHT = 0u;
  static constexpr ::uint8_t K_CYLINDER_RADIUS = 1u;
  static constexpr ::uint8_t K_CONE_HEIGHT = 0u;
  static constexpr ::uint8_t K_CONE_RADIUS = 1u;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8943cb5e3be8b29, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

// =======================================================================================

class Mesh::Reader {
public:
  typedef Mesh Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasTriangles() const;
  inline ::capnp::List<::mrp::shape::MeshTriangle,
                       ::capnp::Kind::STRUCT>::Reader
  getTriangles() const;

  inline bool hasVertices() const;
  inline ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>::Reader
  getVertices() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Mesh::Builder {
public:
  typedef Mesh Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasTriangles();
  inline ::capnp::List<::mrp::shape::MeshTriangle,
                       ::capnp::Kind::STRUCT>::Builder
  getTriangles();
  inline void setTriangles(::capnp::List<::mrp::shape::MeshTriangle,
                                         ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<::mrp::shape::MeshTriangle,
                       ::capnp::Kind::STRUCT>::Builder
  initTriangles(unsigned int size);
  inline void
  adoptTriangles(::capnp::Orphan<::capnp::List<::mrp::shape::MeshTriangle,
                                               ::capnp::Kind::STRUCT>> &&value);
  inline ::capnp::Orphan<
      ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>>
  disownTriangles();

  inline bool hasVertices();
  inline ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>::Builder
  getVertices();
  inline void setVertices(::capnp::List<::mrp::geometry::Point,
                                        ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>::Builder
  initVertices(unsigned int size);
  inline void
  adoptVertices(::capnp::Orphan<::capnp::List<::mrp::geometry::Point,
                                              ::capnp::Kind::STRUCT>> &&value);
  inline ::capnp::Orphan<
      ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>>
  disownVertices();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Mesh::Pipeline {
public:
  typedef Mesh Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class MeshTriangle::Reader {
public:
  typedef MeshTriangle Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasVertexIndices() const;
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader
  getVertexIndices() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MeshTriangle::Builder {
public:
  typedef MeshTriangle Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasVertexIndices();
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
  getVertexIndices();
  inline void setVertexIndices(
      ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVertexIndices(::kj::ArrayPtr<const ::uint32_t> value);
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
  initVertexIndices(unsigned int size);
  inline void adoptVertexIndices(
      ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
          &&value);
  inline ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
  disownVertexIndices();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MeshTriangle::Pipeline {
public:
  typedef MeshTriangle Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Plane::Reader {
public:
  typedef Plane Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasCoef() const;
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
  getCoef() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Plane::Builder {
public:
  typedef Plane Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasCoef();
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder getCoef();
  inline void
  setCoef(::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCoef(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
  initCoef(unsigned int size);
  inline void adoptCoef(
      ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value);
  inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
  disownCoef();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Plane::Pipeline {
public:
  typedef Plane Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class SolidPrimitive::Reader {
public:
  typedef SolidPrimitive Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline ::uint8_t getType() const;

  inline bool hasDimensions() const;
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
  getDimensions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SolidPrimitive::Builder {
public:
  typedef SolidPrimitive Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline ::uint8_t getType();
  inline void setType(::uint8_t value);

  inline bool hasDimensions();
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
  getDimensions();
  inline void
  setDimensions(::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDimensions(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
  initDimensions(unsigned int size);
  inline void adoptDimensions(
      ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value);
  inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
  disownDimensions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SolidPrimitive::Pipeline {
public:
  typedef SolidPrimitive Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

// =======================================================================================

inline bool Mesh::Reader::hasTriangles() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Mesh::Builder::hasTriangles() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>::Reader
Mesh::Reader::getTriangles() const {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>>::
      get(_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>::Builder
Mesh::Builder::getTriangles() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>>::
      get(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Mesh::Builder::setTriangles(
    ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>::Reader
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>::Builder
Mesh::Builder::initTriangles(unsigned int size) {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>>::
      init(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
           size);
}
inline void Mesh::Builder::adoptTriangles(
    ::capnp::Orphan<::capnp::List<::mrp::shape::MeshTriangle,
                                  ::capnp::Kind::STRUCT>> &&value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>>::
      adopt(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<
    ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>>
Mesh::Builder::disownTriangles() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::shape::MeshTriangle, ::capnp::Kind::STRUCT>>::
      disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasVertices() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Mesh::Builder::hasVertices() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>::Reader
Mesh::Reader::getVertices() const {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>::Builder
Mesh::Builder::getVertices() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void
Mesh::Builder::setVertices(::capnp::List<::mrp::geometry::Point,
                                         ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>::Builder
Mesh::Builder::initVertices(unsigned int size) {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>>::
      init(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
           size);
}
inline void Mesh::Builder::adoptVertices(
    ::capnp::Orphan<
        ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>> &&value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>>::
      adopt(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<
    ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>>
Mesh::Builder::disownVertices() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Point, ::capnp::Kind::STRUCT>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool MeshTriangle::Reader::hasVertexIndices() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MeshTriangle::Builder::hasVertexIndices() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader
MeshTriangle::Reader::getVertexIndices() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
MeshTriangle::Builder::getVertexIndices() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MeshTriangle::Builder::setVertexIndices(
    ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void MeshTriangle::Builder::setVertexIndices(
    ::kj::ArrayPtr<const ::uint32_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
MeshTriangle::Builder::initVertexIndices(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void MeshTriangle::Builder::adoptVertexIndices(
    ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
        &&value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
MeshTriangle::Builder::disownVertexIndices() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Plane::Reader::hasCoef() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Plane::Builder::hasCoef() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
Plane::Reader::getCoef() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
Plane::Builder::getCoef() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Plane::Builder::setCoef(
    ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void Plane::Builder::setCoef(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
Plane::Builder::initCoef(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void Plane::Builder::adoptCoef(
    ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
Plane::Builder::disownCoef() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint8_t SolidPrimitive::Reader::getType() const {
  return _reader.getDataField<::uint8_t>(::capnp::bounded<0>() *
                                         ::capnp::ELEMENTS);
}

inline ::uint8_t SolidPrimitive::Builder::getType() {
  return _builder.getDataField<::uint8_t>(::capnp::bounded<0>() *
                                          ::capnp::ELEMENTS);
}
inline void SolidPrimitive::Builder::setType(::uint8_t value) {
  _builder.setDataField<::uint8_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS,
                                   value);
}

inline bool SolidPrimitive::Reader::hasDimensions() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SolidPrimitive::Builder::hasDimensions() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
SolidPrimitive::Reader::getDimensions() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
SolidPrimitive::Builder::getDimensions() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SolidPrimitive::Builder::setDimensions(
    ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void
SolidPrimitive::Builder::setDimensions(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
SolidPrimitive::Builder::initDimensions(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void SolidPrimitive::Builder::adoptDimensions(
    ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
SolidPrimitive::Builder::disownDimensions() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

} // namespace shape
} // namespace mrp

CAPNP_END_HEADER
