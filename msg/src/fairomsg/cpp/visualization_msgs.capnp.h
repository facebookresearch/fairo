// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: visualization_msgs.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "geometry_msgs.capnp.h"
#include "std_msgs.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b340cf7c3d62a5e1);
CAPNP_DECLARE_SCHEMA(ac6d90d9887d084b);
CAPNP_DECLARE_SCHEMA(ff446a11a97a1bba);
CAPNP_DECLARE_SCHEMA(b2d49235e8ff8676);
CAPNP_DECLARE_SCHEMA(ec7103afedb08257);
CAPNP_DECLARE_SCHEMA(9158fbbf4eaed666);
CAPNP_DECLARE_SCHEMA(c285f0cfe96e7867);
CAPNP_DECLARE_SCHEMA(cb66943bb684795a);
CAPNP_DECLARE_SCHEMA(dab40ba8c922b4ba);
CAPNP_DECLARE_SCHEMA(b4ad12860007ca93);
CAPNP_DECLARE_SCHEMA(bb8d8d0cd496318c);
CAPNP_DECLARE_SCHEMA(fc05690b6282885f);
CAPNP_DECLARE_SCHEMA(b7ad12bbac10d15f);
CAPNP_DECLARE_SCHEMA(fbc31b6c177a807b);
CAPNP_DECLARE_SCHEMA(f71e35a27ecf4972);
CAPNP_DECLARE_SCHEMA(bb115a0306f3e881);
CAPNP_DECLARE_SCHEMA(fb51f238398e3848);
CAPNP_DECLARE_SCHEMA(bbabca4fa87a1b06);
CAPNP_DECLARE_SCHEMA(c3d20a129f004cc3);
CAPNP_DECLARE_SCHEMA(e911ddfd18fe1ee9);
CAPNP_DECLARE_SCHEMA(e9d8abe4a2a074c2);
CAPNP_DECLARE_SCHEMA(e8a4a97f457afc51);
CAPNP_DECLARE_SCHEMA(b74a3ceb8156586d);
CAPNP_DECLARE_SCHEMA(8717a25b15e06c03);
CAPNP_DECLARE_SCHEMA(acf027f5768e7a90);
CAPNP_DECLARE_SCHEMA(c54ae77c721ab0a0);
CAPNP_DECLARE_SCHEMA(a4e824ab03a2fc25);
CAPNP_DECLARE_SCHEMA(954e0f4736468658);
CAPNP_DECLARE_SCHEMA(bbabfa8968fb5dbc);
CAPNP_DECLARE_SCHEMA(df469fd46377349b);
CAPNP_DECLARE_SCHEMA(dc53206ad56c678f);
CAPNP_DECLARE_SCHEMA(d56a6cd93315d05a);
CAPNP_DECLARE_SCHEMA(e98e44d10f26c1ad);
CAPNP_DECLARE_SCHEMA(fffaae9db1726229);
CAPNP_DECLARE_SCHEMA(dba6c0085c2442e9);
CAPNP_DECLARE_SCHEMA(9ac063ef5a4f120f);
CAPNP_DECLARE_SCHEMA(cbd9195fab8bfd3f);
CAPNP_DECLARE_SCHEMA(9d1f51c844842cfa);
CAPNP_DECLARE_SCHEMA(b5f9ab5805779ec4);
CAPNP_DECLARE_SCHEMA(e6341d62da3e0fda);
CAPNP_DECLARE_SCHEMA(c6f48b8661ccc3d7);
CAPNP_DECLARE_SCHEMA(d5f425dbd6980899);
CAPNP_DECLARE_SCHEMA(bd86dd18c1d9f78a);
CAPNP_DECLARE_SCHEMA(c1e6b3acb409e69d);
CAPNP_DECLARE_SCHEMA(b6a54d961780916b);
CAPNP_DECLARE_SCHEMA(d0f9338002422964);
CAPNP_DECLARE_SCHEMA(900ebbedda0237cb);
CAPNP_DECLARE_SCHEMA(f9ec4f78b1970735);
CAPNP_DECLARE_SCHEMA(fd5f2d52920102be);
CAPNP_DECLARE_SCHEMA(ef78d47ddf3e17d1);
CAPNP_DECLARE_SCHEMA(cc62c859541c8b3b);
CAPNP_DECLARE_SCHEMA(9b0f346ae9dfdf82);
CAPNP_DECLARE_SCHEMA(c4b1b8f64ffdf70f);
CAPNP_DECLARE_SCHEMA(8e1907e9f0be73da);
CAPNP_DECLARE_SCHEMA(a5d956a855c4fb33);
CAPNP_DECLARE_SCHEMA(930c02d5b737646b);
CAPNP_DECLARE_SCHEMA(b2e2ef6bd1f93f4a);

}  // namespace schemas
}  // namespace capnp

namespace mrp {
namespace visualization {

struct ImageMarker {
  ImageMarker() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint8_t K_CIRCLE = 0u;
  static constexpr  ::uint8_t K_LINE_STRIP = 1u;
  static constexpr  ::uint8_t K_LINE_LIST = 2u;
  static constexpr  ::uint8_t K_POLYGON = 3u;
  static constexpr  ::uint8_t K_POINTS = 4u;
  static constexpr  ::uint8_t K_ADD = 0u;
  static constexpr  ::uint8_t K_REMOVE = 1u;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b340cf7c3d62a5e1, 3, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InteractiveMarker {
  InteractiveMarker() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dab40ba8c922b4ba, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InteractiveMarkerControl {
  InteractiveMarkerControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint8_t K_INHERIT = 0u;
  static constexpr  ::uint8_t K_FIXED = 1u;
  static constexpr  ::uint8_t K_VIEW_FACING = 2u;
  static constexpr  ::uint8_t K_NONE = 0u;
  static constexpr  ::uint8_t K_MENU = 1u;
  static constexpr  ::uint8_t K_BUTTON = 2u;
  static constexpr  ::uint8_t K_MOVE_AXIS = 3u;
  static constexpr  ::uint8_t K_MOVE_PLANE = 4u;
  static constexpr  ::uint8_t K_ROTATE_AXIS = 5u;
  static constexpr  ::uint8_t K_MOVE_ROTATE = 6u;
  static constexpr  ::uint8_t K_MOVE3_D = 7u;
  static constexpr  ::uint8_t K_ROTATE3_D = 8u;
  static constexpr  ::uint8_t K_MOVE_ROTATE3_D = 9u;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4ad12860007ca93, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InteractiveMarkerFeedback {
  InteractiveMarkerFeedback() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint8_t K_KEEP_ALIVE = 0u;
  static constexpr  ::uint8_t K_POSE_UPDATE = 1u;
  static constexpr  ::uint8_t K_MENU_SELECT = 2u;
  static constexpr  ::uint8_t K_BUTTON_CLICK = 3u;
  static constexpr  ::uint8_t K_MOUSE_DOWN = 4u;
  static constexpr  ::uint8_t K_MOUSE_UP = 5u;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8717a25b15e06c03, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InteractiveMarkerInit {
  InteractiveMarkerInit() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc53206ad56c678f, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InteractiveMarkerPose {
  InteractiveMarkerPose() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d56a6cd93315d05a, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InteractiveMarkerUpdate {
  InteractiveMarkerUpdate() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint8_t K_KEEP_ALIVE = 0u;
  static constexpr  ::uint8_t K_UPDATE = 1u;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e98e44d10f26c1ad, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Marker {
  Marker() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint8_t K_ARROW = 0u;
  static constexpr  ::uint8_t K_CUBE = 1u;
  static constexpr  ::uint8_t K_SPHERE = 2u;
  static constexpr  ::uint8_t K_CYLINDER = 3u;
  static constexpr  ::uint8_t K_LINE_STRIP = 4u;
  static constexpr  ::uint8_t K_LINE_LIST = 5u;
  static constexpr  ::uint8_t K_CUBE_LIST = 6u;
  static constexpr  ::uint8_t K_SPHERE_LIST = 7u;
  static constexpr  ::uint8_t K_POINTS = 8u;
  static constexpr  ::uint8_t K_TEXT_VIEW_FACING = 9u;
  static constexpr  ::uint8_t K_MESH_RESOURCE = 10u;
  static constexpr  ::uint8_t K_TRIANGLE_LIST = 11u;
  static constexpr  ::uint8_t K_ADD = 0u;
  static constexpr  ::uint8_t K_MODIFY = 0u;
  static constexpr  ::uint8_t K_DELETE = 2u;
  static constexpr  ::uint8_t K_DELETEALL = 3u;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ac063ef5a4f120f, 2, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MarkerArray {
  MarkerArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4b1b8f64ffdf70f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MenuEntry {
  MenuEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  static constexpr  ::uint8_t K_FEEDBACK = 0u;
  static constexpr  ::uint8_t K_ROSRUN = 1u;
  static constexpr  ::uint8_t K_ROSLAUNCH = 2u;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8e1907e9f0be73da, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ImageMarker::Reader {
public:
  typedef ImageMarker Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::mrp::std::Header::Reader getHeader() const;

  inline bool hasNs() const;
  inline  ::capnp::Text::Reader getNs() const;

  inline  ::int32_t getId() const;

  inline  ::int32_t getType() const;

  inline  ::int32_t getAction() const;

  inline bool hasPosition() const;
  inline  ::mrp::geometry::Point::Reader getPosition() const;

  inline float getScale() const;

  inline bool hasOutlineColor() const;
  inline  ::mrp::std::ColorRGBA::Reader getOutlineColor() const;

  inline  ::uint8_t getFilled() const;

  inline bool hasFillColor() const;
  inline  ::mrp::std::ColorRGBA::Reader getFillColor() const;

  inline bool hasLifetime() const;
  inline  ::mrp::std::Duration::Reader getLifetime() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Reader getPoints() const;

  inline bool hasOutlineColors() const;
  inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Reader getOutlineColors() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ImageMarker::Builder {
public:
  typedef ImageMarker Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::mrp::std::Header::Builder getHeader();
  inline void setHeader( ::mrp::std::Header::Reader value);
  inline  ::mrp::std::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::mrp::std::Header>&& value);
  inline ::capnp::Orphan< ::mrp::std::Header> disownHeader();

  inline bool hasNs();
  inline  ::capnp::Text::Builder getNs();
  inline void setNs( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNs(unsigned int size);
  inline void adoptNs(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNs();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline  ::int32_t getAction();
  inline void setAction( ::int32_t value);

  inline bool hasPosition();
  inline  ::mrp::geometry::Point::Builder getPosition();
  inline void setPosition( ::mrp::geometry::Point::Reader value);
  inline  ::mrp::geometry::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::mrp::geometry::Point>&& value);
  inline ::capnp::Orphan< ::mrp::geometry::Point> disownPosition();

  inline float getScale();
  inline void setScale(float value);

  inline bool hasOutlineColor();
  inline  ::mrp::std::ColorRGBA::Builder getOutlineColor();
  inline void setOutlineColor( ::mrp::std::ColorRGBA::Reader value);
  inline  ::mrp::std::ColorRGBA::Builder initOutlineColor();
  inline void adoptOutlineColor(::capnp::Orphan< ::mrp::std::ColorRGBA>&& value);
  inline ::capnp::Orphan< ::mrp::std::ColorRGBA> disownOutlineColor();

  inline  ::uint8_t getFilled();
  inline void setFilled( ::uint8_t value);

  inline bool hasFillColor();
  inline  ::mrp::std::ColorRGBA::Builder getFillColor();
  inline void setFillColor( ::mrp::std::ColorRGBA::Reader value);
  inline  ::mrp::std::ColorRGBA::Builder initFillColor();
  inline void adoptFillColor(::capnp::Orphan< ::mrp::std::ColorRGBA>&& value);
  inline ::capnp::Orphan< ::mrp::std::ColorRGBA> disownFillColor();

  inline bool hasLifetime();
  inline  ::mrp::std::Duration::Builder getLifetime();
  inline void setLifetime( ::mrp::std::Duration::Reader value);
  inline  ::mrp::std::Duration::Builder initLifetime();
  inline void adoptLifetime(::capnp::Orphan< ::mrp::std::Duration>&& value);
  inline ::capnp::Orphan< ::mrp::std::Duration> disownLifetime();

  inline bool hasPoints();
  inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>> disownPoints();

  inline bool hasOutlineColors();
  inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Builder getOutlineColors();
  inline void setOutlineColors( ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Builder initOutlineColors(unsigned int size);
  inline void adoptOutlineColors(::capnp::Orphan< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>> disownOutlineColors();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ImageMarker::Pipeline {
public:
  typedef ImageMarker Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mrp::std::Header::Pipeline getHeader();
  inline  ::mrp::geometry::Point::Pipeline getPosition();
  inline  ::mrp::std::ColorRGBA::Pipeline getOutlineColor();
  inline  ::mrp::std::ColorRGBA::Pipeline getFillColor();
  inline  ::mrp::std::Duration::Pipeline getLifetime();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InteractiveMarker::Reader {
public:
  typedef InteractiveMarker Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::mrp::std::Header::Reader getHeader() const;

  inline bool hasPose() const;
  inline  ::mrp::geometry::Pose::Reader getPose() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

  inline float getScale() const;

  inline bool hasMenuEntries() const;
  inline  ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>::Reader getMenuEntries() const;

  inline bool hasControls() const;
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>::Reader getControls() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InteractiveMarker::Builder {
public:
  typedef InteractiveMarker Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::mrp::std::Header::Builder getHeader();
  inline void setHeader( ::mrp::std::Header::Reader value);
  inline  ::mrp::std::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::mrp::std::Header>&& value);
  inline ::capnp::Orphan< ::mrp::std::Header> disownHeader();

  inline bool hasPose();
  inline  ::mrp::geometry::Pose::Builder getPose();
  inline void setPose( ::mrp::geometry::Pose::Reader value);
  inline  ::mrp::geometry::Pose::Builder initPose();
  inline void adoptPose(::capnp::Orphan< ::mrp::geometry::Pose>&& value);
  inline ::capnp::Orphan< ::mrp::geometry::Pose> disownPose();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

  inline float getScale();
  inline void setScale(float value);

  inline bool hasMenuEntries();
  inline  ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>::Builder getMenuEntries();
  inline void setMenuEntries( ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>::Builder initMenuEntries(unsigned int size);
  inline void adoptMenuEntries(::capnp::Orphan< ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>> disownMenuEntries();

  inline bool hasControls();
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>::Builder getControls();
  inline void setControls( ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>::Builder initControls(unsigned int size);
  inline void adoptControls(::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>> disownControls();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InteractiveMarker::Pipeline {
public:
  typedef InteractiveMarker Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mrp::std::Header::Pipeline getHeader();
  inline  ::mrp::geometry::Pose::Pipeline getPose();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InteractiveMarkerControl::Reader {
public:
  typedef InteractiveMarkerControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasOrientation() const;
  inline  ::mrp::geometry::Quaternion::Reader getOrientation() const;

  inline  ::uint8_t getOrientationMode() const;

  inline  ::uint8_t getInteractionMode() const;

  inline bool getAlwaysVisible() const;

  inline bool hasMarkers() const;
  inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Reader getMarkers() const;

  inline bool getIndependentMarkerOrientation() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InteractiveMarkerControl::Builder {
public:
  typedef InteractiveMarkerControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasOrientation();
  inline  ::mrp::geometry::Quaternion::Builder getOrientation();
  inline void setOrientation( ::mrp::geometry::Quaternion::Reader value);
  inline  ::mrp::geometry::Quaternion::Builder initOrientation();
  inline void adoptOrientation(::capnp::Orphan< ::mrp::geometry::Quaternion>&& value);
  inline ::capnp::Orphan< ::mrp::geometry::Quaternion> disownOrientation();

  inline  ::uint8_t getOrientationMode();
  inline void setOrientationMode( ::uint8_t value);

  inline  ::uint8_t getInteractionMode();
  inline void setInteractionMode( ::uint8_t value);

  inline bool getAlwaysVisible();
  inline void setAlwaysVisible(bool value);

  inline bool hasMarkers();
  inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Builder getMarkers();
  inline void setMarkers( ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Builder initMarkers(unsigned int size);
  inline void adoptMarkers(::capnp::Orphan< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>> disownMarkers();

  inline bool getIndependentMarkerOrientation();
  inline void setIndependentMarkerOrientation(bool value);

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InteractiveMarkerControl::Pipeline {
public:
  typedef InteractiveMarkerControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mrp::geometry::Quaternion::Pipeline getOrientation();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InteractiveMarkerFeedback::Reader {
public:
  typedef InteractiveMarkerFeedback Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::mrp::std::Header::Reader getHeader() const;

  inline bool hasClientId() const;
  inline  ::capnp::Text::Reader getClientId() const;

  inline bool hasMarkerName() const;
  inline  ::capnp::Text::Reader getMarkerName() const;

  inline bool hasControlName() const;
  inline  ::capnp::Text::Reader getControlName() const;

  inline  ::uint8_t getEventType() const;

  inline bool hasPose() const;
  inline  ::mrp::geometry::Pose::Reader getPose() const;

  inline  ::uint32_t getMenuEntryId() const;

  inline bool hasMousePoint() const;
  inline  ::mrp::geometry::Point::Reader getMousePoint() const;

  inline bool getMousePointValid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InteractiveMarkerFeedback::Builder {
public:
  typedef InteractiveMarkerFeedback Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::mrp::std::Header::Builder getHeader();
  inline void setHeader( ::mrp::std::Header::Reader value);
  inline  ::mrp::std::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::mrp::std::Header>&& value);
  inline ::capnp::Orphan< ::mrp::std::Header> disownHeader();

  inline bool hasClientId();
  inline  ::capnp::Text::Builder getClientId();
  inline void setClientId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initClientId(unsigned int size);
  inline void adoptClientId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownClientId();

  inline bool hasMarkerName();
  inline  ::capnp::Text::Builder getMarkerName();
  inline void setMarkerName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMarkerName(unsigned int size);
  inline void adoptMarkerName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMarkerName();

  inline bool hasControlName();
  inline  ::capnp::Text::Builder getControlName();
  inline void setControlName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initControlName(unsigned int size);
  inline void adoptControlName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownControlName();

  inline  ::uint8_t getEventType();
  inline void setEventType( ::uint8_t value);

  inline bool hasPose();
  inline  ::mrp::geometry::Pose::Builder getPose();
  inline void setPose( ::mrp::geometry::Pose::Reader value);
  inline  ::mrp::geometry::Pose::Builder initPose();
  inline void adoptPose(::capnp::Orphan< ::mrp::geometry::Pose>&& value);
  inline ::capnp::Orphan< ::mrp::geometry::Pose> disownPose();

  inline  ::uint32_t getMenuEntryId();
  inline void setMenuEntryId( ::uint32_t value);

  inline bool hasMousePoint();
  inline  ::mrp::geometry::Point::Builder getMousePoint();
  inline void setMousePoint( ::mrp::geometry::Point::Reader value);
  inline  ::mrp::geometry::Point::Builder initMousePoint();
  inline void adoptMousePoint(::capnp::Orphan< ::mrp::geometry::Point>&& value);
  inline ::capnp::Orphan< ::mrp::geometry::Point> disownMousePoint();

  inline bool getMousePointValid();
  inline void setMousePointValid(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InteractiveMarkerFeedback::Pipeline {
public:
  typedef InteractiveMarkerFeedback Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mrp::std::Header::Pipeline getHeader();
  inline  ::mrp::geometry::Pose::Pipeline getPose();
  inline  ::mrp::geometry::Point::Pipeline getMousePoint();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InteractiveMarkerInit::Reader {
public:
  typedef InteractiveMarkerInit Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasServerId() const;
  inline  ::capnp::Text::Reader getServerId() const;

  inline  ::uint64_t getSeqNum() const;

  inline bool hasMarkers() const;
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Reader getMarkers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InteractiveMarkerInit::Builder {
public:
  typedef InteractiveMarkerInit Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasServerId();
  inline  ::capnp::Text::Builder getServerId();
  inline void setServerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initServerId(unsigned int size);
  inline void adoptServerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownServerId();

  inline  ::uint64_t getSeqNum();
  inline void setSeqNum( ::uint64_t value);

  inline bool hasMarkers();
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Builder getMarkers();
  inline void setMarkers( ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Builder initMarkers(unsigned int size);
  inline void adoptMarkers(::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>> disownMarkers();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InteractiveMarkerInit::Pipeline {
public:
  typedef InteractiveMarkerInit Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InteractiveMarkerPose::Reader {
public:
  typedef InteractiveMarkerPose Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::mrp::std::Header::Reader getHeader() const;

  inline bool hasPose() const;
  inline  ::mrp::geometry::Pose::Reader getPose() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InteractiveMarkerPose::Builder {
public:
  typedef InteractiveMarkerPose Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::mrp::std::Header::Builder getHeader();
  inline void setHeader( ::mrp::std::Header::Reader value);
  inline  ::mrp::std::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::mrp::std::Header>&& value);
  inline ::capnp::Orphan< ::mrp::std::Header> disownHeader();

  inline bool hasPose();
  inline  ::mrp::geometry::Pose::Builder getPose();
  inline void setPose( ::mrp::geometry::Pose::Reader value);
  inline  ::mrp::geometry::Pose::Builder initPose();
  inline void adoptPose(::capnp::Orphan< ::mrp::geometry::Pose>&& value);
  inline ::capnp::Orphan< ::mrp::geometry::Pose> disownPose();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InteractiveMarkerPose::Pipeline {
public:
  typedef InteractiveMarkerPose Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mrp::std::Header::Pipeline getHeader();
  inline  ::mrp::geometry::Pose::Pipeline getPose();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InteractiveMarkerUpdate::Reader {
public:
  typedef InteractiveMarkerUpdate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasServerId() const;
  inline  ::capnp::Text::Reader getServerId() const;

  inline  ::uint64_t getSeqNum() const;

  inline  ::uint8_t getType() const;

  inline bool hasMarkers() const;
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Reader getMarkers() const;

  inline bool hasPoses() const;
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>::Reader getPoses() const;

  inline bool hasErases() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getErases() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InteractiveMarkerUpdate::Builder {
public:
  typedef InteractiveMarkerUpdate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasServerId();
  inline  ::capnp::Text::Builder getServerId();
  inline void setServerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initServerId(unsigned int size);
  inline void adoptServerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownServerId();

  inline  ::uint64_t getSeqNum();
  inline void setSeqNum( ::uint64_t value);

  inline  ::uint8_t getType();
  inline void setType( ::uint8_t value);

  inline bool hasMarkers();
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Builder getMarkers();
  inline void setMarkers( ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Builder initMarkers(unsigned int size);
  inline void adoptMarkers(::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>> disownMarkers();

  inline bool hasPoses();
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>::Builder getPoses();
  inline void setPoses( ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>::Builder initPoses(unsigned int size);
  inline void adoptPoses(::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>> disownPoses();

  inline bool hasErases();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getErases();
  inline void setErases( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setErases(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initErases(unsigned int size);
  inline void adoptErases(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownErases();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InteractiveMarkerUpdate::Pipeline {
public:
  typedef InteractiveMarkerUpdate Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Marker::Reader {
public:
  typedef Marker Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::mrp::std::Header::Reader getHeader() const;

  inline bool hasNs() const;
  inline  ::capnp::Text::Reader getNs() const;

  inline  ::int32_t getId() const;

  inline  ::int32_t getType() const;

  inline  ::int32_t getAction() const;

  inline bool hasPose() const;
  inline  ::mrp::geometry::Pose::Reader getPose() const;

  inline bool hasScale() const;
  inline  ::mrp::geometry::Vector3::Reader getScale() const;

  inline bool hasColor() const;
  inline  ::mrp::std::ColorRGBA::Reader getColor() const;

  inline bool hasLifetime() const;
  inline  ::mrp::std::Duration::Reader getLifetime() const;

  inline bool getFrameLocked() const;

  inline bool hasPoints() const;
  inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Reader getPoints() const;

  inline bool hasColors() const;
  inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Reader getColors() const;

  inline bool hasText() const;
  inline  ::capnp::Text::Reader getText() const;

  inline bool hasMeshResource() const;
  inline  ::capnp::Text::Reader getMeshResource() const;

  inline bool getMeshUseEmbeddedMaterials() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Marker::Builder {
public:
  typedef Marker Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::mrp::std::Header::Builder getHeader();
  inline void setHeader( ::mrp::std::Header::Reader value);
  inline  ::mrp::std::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::mrp::std::Header>&& value);
  inline ::capnp::Orphan< ::mrp::std::Header> disownHeader();

  inline bool hasNs();
  inline  ::capnp::Text::Builder getNs();
  inline void setNs( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNs(unsigned int size);
  inline void adoptNs(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNs();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline  ::int32_t getAction();
  inline void setAction( ::int32_t value);

  inline bool hasPose();
  inline  ::mrp::geometry::Pose::Builder getPose();
  inline void setPose( ::mrp::geometry::Pose::Reader value);
  inline  ::mrp::geometry::Pose::Builder initPose();
  inline void adoptPose(::capnp::Orphan< ::mrp::geometry::Pose>&& value);
  inline ::capnp::Orphan< ::mrp::geometry::Pose> disownPose();

  inline bool hasScale();
  inline  ::mrp::geometry::Vector3::Builder getScale();
  inline void setScale( ::mrp::geometry::Vector3::Reader value);
  inline  ::mrp::geometry::Vector3::Builder initScale();
  inline void adoptScale(::capnp::Orphan< ::mrp::geometry::Vector3>&& value);
  inline ::capnp::Orphan< ::mrp::geometry::Vector3> disownScale();

  inline bool hasColor();
  inline  ::mrp::std::ColorRGBA::Builder getColor();
  inline void setColor( ::mrp::std::ColorRGBA::Reader value);
  inline  ::mrp::std::ColorRGBA::Builder initColor();
  inline void adoptColor(::capnp::Orphan< ::mrp::std::ColorRGBA>&& value);
  inline ::capnp::Orphan< ::mrp::std::ColorRGBA> disownColor();

  inline bool hasLifetime();
  inline  ::mrp::std::Duration::Builder getLifetime();
  inline void setLifetime( ::mrp::std::Duration::Reader value);
  inline  ::mrp::std::Duration::Builder initLifetime();
  inline void adoptLifetime(::capnp::Orphan< ::mrp::std::Duration>&& value);
  inline ::capnp::Orphan< ::mrp::std::Duration> disownLifetime();

  inline bool getFrameLocked();
  inline void setFrameLocked(bool value);

  inline bool hasPoints();
  inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Builder getPoints();
  inline void setPoints( ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Builder initPoints(unsigned int size);
  inline void adoptPoints(::capnp::Orphan< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>> disownPoints();

  inline bool hasColors();
  inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Builder getColors();
  inline void setColors( ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Builder initColors(unsigned int size);
  inline void adoptColors(::capnp::Orphan< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>> disownColors();

  inline bool hasText();
  inline  ::capnp::Text::Builder getText();
  inline void setText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initText(unsigned int size);
  inline void adoptText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownText();

  inline bool hasMeshResource();
  inline  ::capnp::Text::Builder getMeshResource();
  inline void setMeshResource( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMeshResource(unsigned int size);
  inline void adoptMeshResource(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMeshResource();

  inline bool getMeshUseEmbeddedMaterials();
  inline void setMeshUseEmbeddedMaterials(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Marker::Pipeline {
public:
  typedef Marker Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mrp::std::Header::Pipeline getHeader();
  inline  ::mrp::geometry::Pose::Pipeline getPose();
  inline  ::mrp::geometry::Vector3::Pipeline getScale();
  inline  ::mrp::std::ColorRGBA::Pipeline getColor();
  inline  ::mrp::std::Duration::Pipeline getLifetime();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MarkerArray::Reader {
public:
  typedef MarkerArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMarkers() const;
  inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Reader getMarkers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MarkerArray::Builder {
public:
  typedef MarkerArray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMarkers();
  inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Builder getMarkers();
  inline void setMarkers( ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Builder initMarkers(unsigned int size);
  inline void adoptMarkers(::capnp::Orphan< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>> disownMarkers();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MarkerArray::Pipeline {
public:
  typedef MarkerArray Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MenuEntry::Reader {
public:
  typedef MenuEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId() const;

  inline  ::uint32_t getParentId() const;

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline bool hasCommand() const;
  inline  ::capnp::Text::Reader getCommand() const;

  inline  ::uint8_t getCommandType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MenuEntry::Builder {
public:
  typedef MenuEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId();
  inline void setId( ::uint32_t value);

  inline  ::uint32_t getParentId();
  inline void setParentId( ::uint32_t value);

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline bool hasCommand();
  inline  ::capnp::Text::Builder getCommand();
  inline void setCommand( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCommand(unsigned int size);
  inline void adoptCommand(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCommand();

  inline  ::uint8_t getCommandType();
  inline void setCommandType( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MenuEntry::Pipeline {
public:
  typedef MenuEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ImageMarker::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ImageMarker::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::std::Header::Reader ImageMarker::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mrp::std::Header::Builder ImageMarker::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::std::Header::Pipeline ImageMarker::Pipeline::getHeader() {
  return  ::mrp::std::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ImageMarker::Builder::setHeader( ::mrp::std::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mrp::std::Header::Builder ImageMarker::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ImageMarker::Builder::adoptHeader(
    ::capnp::Orphan< ::mrp::std::Header>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::std::Header> ImageMarker::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ImageMarker::Reader::hasNs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ImageMarker::Builder::hasNs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ImageMarker::Reader::getNs() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ImageMarker::Builder::getNs() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ImageMarker::Builder::setNs( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ImageMarker::Builder::initNs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ImageMarker::Builder::adoptNs(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ImageMarker::Builder::disownNs() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t ImageMarker::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ImageMarker::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ImageMarker::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ImageMarker::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ImageMarker::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ImageMarker::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ImageMarker::Reader::getAction() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ImageMarker::Builder::getAction() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ImageMarker::Builder::setAction( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ImageMarker::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ImageMarker::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::geometry::Point::Reader ImageMarker::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::mrp::geometry::Point::Builder ImageMarker::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::geometry::Point::Pipeline ImageMarker::Pipeline::getPosition() {
  return  ::mrp::geometry::Point::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ImageMarker::Builder::setPosition( ::mrp::geometry::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::mrp::geometry::Point::Builder ImageMarker::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ImageMarker::Builder::adoptPosition(
    ::capnp::Orphan< ::mrp::geometry::Point>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::geometry::Point> ImageMarker::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float ImageMarker::Reader::getScale() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ImageMarker::Builder::getScale() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ImageMarker::Builder::setScale(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool ImageMarker::Reader::hasOutlineColor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ImageMarker::Builder::hasOutlineColor() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::std::ColorRGBA::Reader ImageMarker::Reader::getOutlineColor() const {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::mrp::std::ColorRGBA::Builder ImageMarker::Builder::getOutlineColor() {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::std::ColorRGBA::Pipeline ImageMarker::Pipeline::getOutlineColor() {
  return  ::mrp::std::ColorRGBA::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ImageMarker::Builder::setOutlineColor( ::mrp::std::ColorRGBA::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::mrp::std::ColorRGBA::Builder ImageMarker::Builder::initOutlineColor() {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ImageMarker::Builder::adoptOutlineColor(
    ::capnp::Orphan< ::mrp::std::ColorRGBA>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::std::ColorRGBA> ImageMarker::Builder::disownOutlineColor() {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint8_t ImageMarker::Reader::getFilled() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ImageMarker::Builder::getFilled() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void ImageMarker::Builder::setFilled( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool ImageMarker::Reader::hasFillColor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ImageMarker::Builder::hasFillColor() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::std::ColorRGBA::Reader ImageMarker::Reader::getFillColor() const {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::mrp::std::ColorRGBA::Builder ImageMarker::Builder::getFillColor() {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::std::ColorRGBA::Pipeline ImageMarker::Pipeline::getFillColor() {
  return  ::mrp::std::ColorRGBA::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ImageMarker::Builder::setFillColor( ::mrp::std::ColorRGBA::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::mrp::std::ColorRGBA::Builder ImageMarker::Builder::initFillColor() {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ImageMarker::Builder::adoptFillColor(
    ::capnp::Orphan< ::mrp::std::ColorRGBA>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::std::ColorRGBA> ImageMarker::Builder::disownFillColor() {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ImageMarker::Reader::hasLifetime() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ImageMarker::Builder::hasLifetime() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::std::Duration::Reader ImageMarker::Reader::getLifetime() const {
  return ::capnp::_::PointerHelpers< ::mrp::std::Duration>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::mrp::std::Duration::Builder ImageMarker::Builder::getLifetime() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Duration>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::std::Duration::Pipeline ImageMarker::Pipeline::getLifetime() {
  return  ::mrp::std::Duration::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void ImageMarker::Builder::setLifetime( ::mrp::std::Duration::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Duration>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::mrp::std::Duration::Builder ImageMarker::Builder::initLifetime() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Duration>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ImageMarker::Builder::adoptLifetime(
    ::capnp::Orphan< ::mrp::std::Duration>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Duration>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::std::Duration> ImageMarker::Builder::disownLifetime() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Duration>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ImageMarker::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ImageMarker::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Reader ImageMarker::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Builder ImageMarker::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ImageMarker::Builder::setPoints( ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Builder ImageMarker::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ImageMarker::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>> ImageMarker::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ImageMarker::Reader::hasOutlineColors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ImageMarker::Builder::hasOutlineColors() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Reader ImageMarker::Reader::getOutlineColors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Builder ImageMarker::Builder::getOutlineColors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ImageMarker::Builder::setOutlineColors( ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Builder ImageMarker::Builder::initOutlineColors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ImageMarker::Builder::adoptOutlineColors(
    ::capnp::Orphan< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>> ImageMarker::Builder::disownOutlineColors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool InteractiveMarker::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarker::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::std::Header::Reader InteractiveMarker::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mrp::std::Header::Builder InteractiveMarker::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::std::Header::Pipeline InteractiveMarker::Pipeline::getHeader() {
  return  ::mrp::std::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void InteractiveMarker::Builder::setHeader( ::mrp::std::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mrp::std::Header::Builder InteractiveMarker::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InteractiveMarker::Builder::adoptHeader(
    ::capnp::Orphan< ::mrp::std::Header>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::std::Header> InteractiveMarker::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InteractiveMarker::Reader::hasPose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarker::Builder::hasPose() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::geometry::Pose::Reader InteractiveMarker::Reader::getPose() const {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mrp::geometry::Pose::Builder InteractiveMarker::Builder::getPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::geometry::Pose::Pipeline InteractiveMarker::Pipeline::getPose() {
  return  ::mrp::geometry::Pose::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void InteractiveMarker::Builder::setPose( ::mrp::geometry::Pose::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mrp::geometry::Pose::Builder InteractiveMarker::Builder::initPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InteractiveMarker::Builder::adoptPose(
    ::capnp::Orphan< ::mrp::geometry::Pose>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::geometry::Pose> InteractiveMarker::Builder::disownPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InteractiveMarker::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarker::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InteractiveMarker::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InteractiveMarker::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InteractiveMarker::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InteractiveMarker::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarker::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InteractiveMarker::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool InteractiveMarker::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarker::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InteractiveMarker::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InteractiveMarker::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void InteractiveMarker::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InteractiveMarker::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarker::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InteractiveMarker::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline float InteractiveMarker::Reader::getScale() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float InteractiveMarker::Builder::getScale() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InteractiveMarker::Builder::setScale(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InteractiveMarker::Reader::hasMenuEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarker::Builder::hasMenuEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>::Reader InteractiveMarker::Reader::getMenuEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>::Builder InteractiveMarker::Builder::getMenuEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void InteractiveMarker::Builder::setMenuEntries( ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>::Builder InteractiveMarker::Builder::initMenuEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarker::Builder::adoptMenuEntries(
    ::capnp::Orphan< ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>> InteractiveMarker::Builder::disownMenuEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::MenuEntry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool InteractiveMarker::Reader::hasControls() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarker::Builder::hasControls() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>::Reader InteractiveMarker::Reader::getControls() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>::Builder InteractiveMarker::Builder::getControls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void InteractiveMarker::Builder::setControls( ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>::Builder InteractiveMarker::Builder::initControls(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarker::Builder::adoptControls(
    ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>> InteractiveMarker::Builder::disownControls() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerControl,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerControl::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerControl::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InteractiveMarkerControl::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InteractiveMarkerControl::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerControl::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InteractiveMarkerControl::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerControl::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InteractiveMarkerControl::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerControl::Reader::hasOrientation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerControl::Builder::hasOrientation() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::geometry::Quaternion::Reader InteractiveMarkerControl::Reader::getOrientation() const {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Quaternion>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mrp::geometry::Quaternion::Builder InteractiveMarkerControl::Builder::getOrientation() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Quaternion>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::geometry::Quaternion::Pipeline InteractiveMarkerControl::Pipeline::getOrientation() {
  return  ::mrp::geometry::Quaternion::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void InteractiveMarkerControl::Builder::setOrientation( ::mrp::geometry::Quaternion::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Quaternion>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mrp::geometry::Quaternion::Builder InteractiveMarkerControl::Builder::initOrientation() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Quaternion>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerControl::Builder::adoptOrientation(
    ::capnp::Orphan< ::mrp::geometry::Quaternion>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Quaternion>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::geometry::Quaternion> InteractiveMarkerControl::Builder::disownOrientation() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Quaternion>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint8_t InteractiveMarkerControl::Reader::getOrientationMode() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t InteractiveMarkerControl::Builder::getOrientationMode() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InteractiveMarkerControl::Builder::setOrientationMode( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t InteractiveMarkerControl::Reader::getInteractionMode() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t InteractiveMarkerControl::Builder::getInteractionMode() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void InteractiveMarkerControl::Builder::setInteractionMode( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool InteractiveMarkerControl::Reader::getAlwaysVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool InteractiveMarkerControl::Builder::getAlwaysVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void InteractiveMarkerControl::Builder::setAlwaysVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool InteractiveMarkerControl::Reader::hasMarkers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerControl::Builder::hasMarkers() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Reader InteractiveMarkerControl::Reader::getMarkers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Builder InteractiveMarkerControl::Builder::getMarkers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerControl::Builder::setMarkers( ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Builder InteractiveMarkerControl::Builder::initMarkers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerControl::Builder::adoptMarkers(
    ::capnp::Orphan< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>> InteractiveMarkerControl::Builder::disownMarkers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerControl::Reader::getIndependentMarkerOrientation() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool InteractiveMarkerControl::Builder::getIndependentMarkerOrientation() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void InteractiveMarkerControl::Builder::setIndependentMarkerOrientation(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool InteractiveMarkerControl::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerControl::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InteractiveMarkerControl::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InteractiveMarkerControl::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerControl::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InteractiveMarkerControl::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerControl::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InteractiveMarkerControl::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerFeedback::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerFeedback::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::std::Header::Reader InteractiveMarkerFeedback::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mrp::std::Header::Builder InteractiveMarkerFeedback::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::std::Header::Pipeline InteractiveMarkerFeedback::Pipeline::getHeader() {
  return  ::mrp::std::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void InteractiveMarkerFeedback::Builder::setHeader( ::mrp::std::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mrp::std::Header::Builder InteractiveMarkerFeedback::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerFeedback::Builder::adoptHeader(
    ::capnp::Orphan< ::mrp::std::Header>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::std::Header> InteractiveMarkerFeedback::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerFeedback::Reader::hasClientId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerFeedback::Builder::hasClientId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InteractiveMarkerFeedback::Reader::getClientId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InteractiveMarkerFeedback::Builder::getClientId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerFeedback::Builder::setClientId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InteractiveMarkerFeedback::Builder::initClientId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerFeedback::Builder::adoptClientId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InteractiveMarkerFeedback::Builder::disownClientId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerFeedback::Reader::hasMarkerName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerFeedback::Builder::hasMarkerName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InteractiveMarkerFeedback::Reader::getMarkerName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InteractiveMarkerFeedback::Builder::getMarkerName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerFeedback::Builder::setMarkerName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InteractiveMarkerFeedback::Builder::initMarkerName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerFeedback::Builder::adoptMarkerName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InteractiveMarkerFeedback::Builder::disownMarkerName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerFeedback::Reader::hasControlName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerFeedback::Builder::hasControlName() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InteractiveMarkerFeedback::Reader::getControlName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InteractiveMarkerFeedback::Builder::getControlName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerFeedback::Builder::setControlName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InteractiveMarkerFeedback::Builder::initControlName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerFeedback::Builder::adoptControlName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InteractiveMarkerFeedback::Builder::disownControlName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint8_t InteractiveMarkerFeedback::Reader::getEventType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t InteractiveMarkerFeedback::Builder::getEventType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InteractiveMarkerFeedback::Builder::setEventType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InteractiveMarkerFeedback::Reader::hasPose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerFeedback::Builder::hasPose() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::geometry::Pose::Reader InteractiveMarkerFeedback::Reader::getPose() const {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::mrp::geometry::Pose::Builder InteractiveMarkerFeedback::Builder::getPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::geometry::Pose::Pipeline InteractiveMarkerFeedback::Pipeline::getPose() {
  return  ::mrp::geometry::Pose::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void InteractiveMarkerFeedback::Builder::setPose( ::mrp::geometry::Pose::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::mrp::geometry::Pose::Builder InteractiveMarkerFeedback::Builder::initPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerFeedback::Builder::adoptPose(
    ::capnp::Orphan< ::mrp::geometry::Pose>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::geometry::Pose> InteractiveMarkerFeedback::Builder::disownPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint32_t InteractiveMarkerFeedback::Reader::getMenuEntryId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t InteractiveMarkerFeedback::Builder::getMenuEntryId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void InteractiveMarkerFeedback::Builder::setMenuEntryId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool InteractiveMarkerFeedback::Reader::hasMousePoint() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerFeedback::Builder::hasMousePoint() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::geometry::Point::Reader InteractiveMarkerFeedback::Reader::getMousePoint() const {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::mrp::geometry::Point::Builder InteractiveMarkerFeedback::Builder::getMousePoint() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::geometry::Point::Pipeline InteractiveMarkerFeedback::Pipeline::getMousePoint() {
  return  ::mrp::geometry::Point::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void InteractiveMarkerFeedback::Builder::setMousePoint( ::mrp::geometry::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::mrp::geometry::Point::Builder InteractiveMarkerFeedback::Builder::initMousePoint() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerFeedback::Builder::adoptMousePoint(
    ::capnp::Orphan< ::mrp::geometry::Point>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::geometry::Point> InteractiveMarkerFeedback::Builder::disownMousePoint() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerFeedback::Reader::getMousePointValid() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool InteractiveMarkerFeedback::Builder::getMousePointValid() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void InteractiveMarkerFeedback::Builder::setMousePointValid(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool InteractiveMarkerInit::Reader::hasServerId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerInit::Builder::hasServerId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InteractiveMarkerInit::Reader::getServerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InteractiveMarkerInit::Builder::getServerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerInit::Builder::setServerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InteractiveMarkerInit::Builder::initServerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerInit::Builder::adoptServerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InteractiveMarkerInit::Builder::disownServerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t InteractiveMarkerInit::Reader::getSeqNum() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t InteractiveMarkerInit::Builder::getSeqNum() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InteractiveMarkerInit::Builder::setSeqNum( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool InteractiveMarkerInit::Reader::hasMarkers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerInit::Builder::hasMarkers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Reader InteractiveMarkerInit::Reader::getMarkers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Builder InteractiveMarkerInit::Builder::getMarkers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerInit::Builder::setMarkers( ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Builder InteractiveMarkerInit::Builder::initMarkers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerInit::Builder::adoptMarkers(
    ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>> InteractiveMarkerInit::Builder::disownMarkers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerPose::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerPose::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::std::Header::Reader InteractiveMarkerPose::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mrp::std::Header::Builder InteractiveMarkerPose::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::std::Header::Pipeline InteractiveMarkerPose::Pipeline::getHeader() {
  return  ::mrp::std::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void InteractiveMarkerPose::Builder::setHeader( ::mrp::std::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mrp::std::Header::Builder InteractiveMarkerPose::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerPose::Builder::adoptHeader(
    ::capnp::Orphan< ::mrp::std::Header>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::std::Header> InteractiveMarkerPose::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerPose::Reader::hasPose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerPose::Builder::hasPose() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::geometry::Pose::Reader InteractiveMarkerPose::Reader::getPose() const {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mrp::geometry::Pose::Builder InteractiveMarkerPose::Builder::getPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::geometry::Pose::Pipeline InteractiveMarkerPose::Pipeline::getPose() {
  return  ::mrp::geometry::Pose::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void InteractiveMarkerPose::Builder::setPose( ::mrp::geometry::Pose::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mrp::geometry::Pose::Builder InteractiveMarkerPose::Builder::initPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerPose::Builder::adoptPose(
    ::capnp::Orphan< ::mrp::geometry::Pose>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::geometry::Pose> InteractiveMarkerPose::Builder::disownPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerPose::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerPose::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InteractiveMarkerPose::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InteractiveMarkerPose::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerPose::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InteractiveMarkerPose::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerPose::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InteractiveMarkerPose::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerUpdate::Reader::hasServerId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerUpdate::Builder::hasServerId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InteractiveMarkerUpdate::Reader::getServerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InteractiveMarkerUpdate::Builder::getServerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerUpdate::Builder::setServerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InteractiveMarkerUpdate::Builder::initServerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerUpdate::Builder::adoptServerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InteractiveMarkerUpdate::Builder::disownServerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t InteractiveMarkerUpdate::Reader::getSeqNum() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t InteractiveMarkerUpdate::Builder::getSeqNum() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void InteractiveMarkerUpdate::Builder::setSeqNum( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t InteractiveMarkerUpdate::Reader::getType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t InteractiveMarkerUpdate::Builder::getType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void InteractiveMarkerUpdate::Builder::setType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool InteractiveMarkerUpdate::Reader::hasMarkers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerUpdate::Builder::hasMarkers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Reader InteractiveMarkerUpdate::Reader::getMarkers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Builder InteractiveMarkerUpdate::Builder::getMarkers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerUpdate::Builder::setMarkers( ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>::Builder InteractiveMarkerUpdate::Builder::initMarkers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerUpdate::Builder::adoptMarkers(
    ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>> InteractiveMarkerUpdate::Builder::disownMarkers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarker,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerUpdate::Reader::hasPoses() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerUpdate::Builder::hasPoses() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>::Reader InteractiveMarkerUpdate::Reader::getPoses() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>::Builder InteractiveMarkerUpdate::Builder::getPoses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerUpdate::Builder::setPoses( ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>::Builder InteractiveMarkerUpdate::Builder::initPoses(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerUpdate::Builder::adoptPoses(
    ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>> InteractiveMarkerUpdate::Builder::disownPoses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::InteractiveMarkerPose,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool InteractiveMarkerUpdate::Reader::hasErases() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool InteractiveMarkerUpdate::Builder::hasErases() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader InteractiveMarkerUpdate::Reader::getErases() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder InteractiveMarkerUpdate::Builder::getErases() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void InteractiveMarkerUpdate::Builder::setErases( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void InteractiveMarkerUpdate::Builder::setErases(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder InteractiveMarkerUpdate::Builder::initErases(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void InteractiveMarkerUpdate::Builder::adoptErases(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> InteractiveMarkerUpdate::Builder::disownErases() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Marker::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Marker::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::std::Header::Reader Marker::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mrp::std::Header::Builder Marker::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::std::Header::Pipeline Marker::Pipeline::getHeader() {
  return  ::mrp::std::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Marker::Builder::setHeader( ::mrp::std::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mrp::std::Header::Builder Marker::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Marker::Builder::adoptHeader(
    ::capnp::Orphan< ::mrp::std::Header>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::std::Header> Marker::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Marker::Reader::hasNs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Marker::Builder::hasNs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Marker::Reader::getNs() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Marker::Builder::getNs() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Marker::Builder::setNs( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Marker::Builder::initNs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Marker::Builder::adoptNs(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Marker::Builder::disownNs() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t Marker::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Marker::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Marker::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Marker::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Marker::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Marker::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Marker::Reader::getAction() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Marker::Builder::getAction() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Marker::Builder::setAction( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Marker::Reader::hasPose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Marker::Builder::hasPose() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::geometry::Pose::Reader Marker::Reader::getPose() const {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::mrp::geometry::Pose::Builder Marker::Builder::getPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::geometry::Pose::Pipeline Marker::Pipeline::getPose() {
  return  ::mrp::geometry::Pose::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Marker::Builder::setPose( ::mrp::geometry::Pose::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::mrp::geometry::Pose::Builder Marker::Builder::initPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Marker::Builder::adoptPose(
    ::capnp::Orphan< ::mrp::geometry::Pose>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::geometry::Pose> Marker::Builder::disownPose() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Pose>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Marker::Reader::hasScale() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Marker::Builder::hasScale() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::geometry::Vector3::Reader Marker::Reader::getScale() const {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Vector3>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::mrp::geometry::Vector3::Builder Marker::Builder::getScale() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Vector3>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::geometry::Vector3::Pipeline Marker::Pipeline::getScale() {
  return  ::mrp::geometry::Vector3::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Marker::Builder::setScale( ::mrp::geometry::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Vector3>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::mrp::geometry::Vector3::Builder Marker::Builder::initScale() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Vector3>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Marker::Builder::adoptScale(
    ::capnp::Orphan< ::mrp::geometry::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::geometry::Vector3>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::geometry::Vector3> Marker::Builder::disownScale() {
  return ::capnp::_::PointerHelpers< ::mrp::geometry::Vector3>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Marker::Reader::hasColor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Marker::Builder::hasColor() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::std::ColorRGBA::Reader Marker::Reader::getColor() const {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::mrp::std::ColorRGBA::Builder Marker::Builder::getColor() {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::std::ColorRGBA::Pipeline Marker::Pipeline::getColor() {
  return  ::mrp::std::ColorRGBA::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Marker::Builder::setColor( ::mrp::std::ColorRGBA::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::mrp::std::ColorRGBA::Builder Marker::Builder::initColor() {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Marker::Builder::adoptColor(
    ::capnp::Orphan< ::mrp::std::ColorRGBA>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::std::ColorRGBA> Marker::Builder::disownColor() {
  return ::capnp::_::PointerHelpers< ::mrp::std::ColorRGBA>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Marker::Reader::hasLifetime() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Marker::Builder::hasLifetime() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::mrp::std::Duration::Reader Marker::Reader::getLifetime() const {
  return ::capnp::_::PointerHelpers< ::mrp::std::Duration>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::mrp::std::Duration::Builder Marker::Builder::getLifetime() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Duration>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mrp::std::Duration::Pipeline Marker::Pipeline::getLifetime() {
  return  ::mrp::std::Duration::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Marker::Builder::setLifetime( ::mrp::std::Duration::Reader value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Duration>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::mrp::std::Duration::Builder Marker::Builder::initLifetime() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Duration>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Marker::Builder::adoptLifetime(
    ::capnp::Orphan< ::mrp::std::Duration>&& value) {
  ::capnp::_::PointerHelpers< ::mrp::std::Duration>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mrp::std::Duration> Marker::Builder::disownLifetime() {
  return ::capnp::_::PointerHelpers< ::mrp::std::Duration>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Marker::Reader::getFrameLocked() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool Marker::Builder::getFrameLocked() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void Marker::Builder::setFrameLocked(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline bool Marker::Reader::hasPoints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Marker::Builder::hasPoints() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Reader Marker::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Builder Marker::Builder::getPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Marker::Builder::setPoints( ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>::Builder Marker::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Marker::Builder::adoptPoints(
    ::capnp::Orphan< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>> Marker::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::geometry::Point,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Marker::Reader::hasColors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Marker::Builder::hasColors() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Reader Marker::Reader::getColors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Builder Marker::Builder::getColors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Marker::Builder::setColors( ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>::Builder Marker::Builder::initColors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Marker::Builder::adoptColors(
    ::capnp::Orphan< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>> Marker::Builder::disownColors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::std::ColorRGBA,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Marker::Reader::hasText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Marker::Builder::hasText() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Marker::Reader::getText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Marker::Builder::getText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Marker::Builder::setText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Marker::Builder::initText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Marker::Builder::adoptText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Marker::Builder::disownText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Marker::Reader::hasMeshResource() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Marker::Builder::hasMeshResource() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Marker::Reader::getMeshResource() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Marker::Builder::getMeshResource() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Marker::Builder::setMeshResource( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Marker::Builder::initMeshResource(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Marker::Builder::adoptMeshResource(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Marker::Builder::disownMeshResource() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Marker::Reader::getMeshUseEmbeddedMaterials() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline bool Marker::Builder::getMeshUseEmbeddedMaterials() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void Marker::Builder::setMeshUseEmbeddedMaterials(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline bool MarkerArray::Reader::hasMarkers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MarkerArray::Builder::hasMarkers() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Reader MarkerArray::Reader::getMarkers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Builder MarkerArray::Builder::getMarkers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MarkerArray::Builder::setMarkers( ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>::Builder MarkerArray::Builder::initMarkers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void MarkerArray::Builder::adoptMarkers(
    ::capnp::Orphan< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>> MarkerArray::Builder::disownMarkers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mrp::visualization::Marker,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t MenuEntry::Reader::getId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t MenuEntry::Builder::getId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MenuEntry::Builder::setId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t MenuEntry::Reader::getParentId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t MenuEntry::Builder::getParentId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MenuEntry::Builder::setParentId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool MenuEntry::Reader::hasTitle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MenuEntry::Builder::hasTitle() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MenuEntry::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MenuEntry::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MenuEntry::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MenuEntry::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void MenuEntry::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MenuEntry::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MenuEntry::Reader::hasCommand() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MenuEntry::Builder::hasCommand() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader MenuEntry::Reader::getCommand() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder MenuEntry::Builder::getCommand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MenuEntry::Builder::setCommand( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder MenuEntry::Builder::initCommand(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void MenuEntry::Builder::adoptCommand(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> MenuEntry::Builder::disownCommand() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint8_t MenuEntry::Reader::getCommandType() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t MenuEntry::Builder::getCommandType() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void MenuEntry::Builder::setCommandType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

