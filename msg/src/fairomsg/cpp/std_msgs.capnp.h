// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: std_msgs.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error                                                                         \
    "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(aae043d52a4e8c60);
CAPNP_DECLARE_SCHEMA(b67e2ec602362112);
CAPNP_DECLARE_SCHEMA(98a0a20f340bb6c8);
CAPNP_DECLARE_SCHEMA(fcddd22e31ab4f70);
CAPNP_DECLARE_SCHEMA(8fba5bceec2d81ff);
CAPNP_DECLARE_SCHEMA(91883f029b2592f8);
CAPNP_DECLARE_SCHEMA(a1ada55891f92fbc);
CAPNP_DECLARE_SCHEMA(f26e720fc35cd246);
CAPNP_DECLARE_SCHEMA(cf9a8bcf03922937);
CAPNP_DECLARE_SCHEMA(cce4456a438dfada);
CAPNP_DECLARE_SCHEMA(97220a0c9cee8e22);
CAPNP_DECLARE_SCHEMA(895053609043e89a);
CAPNP_DECLARE_SCHEMA(8454977525614501);
CAPNP_DECLARE_SCHEMA(da16d19a39e3c483);
CAPNP_DECLARE_SCHEMA(f28620b89bed09ac);
CAPNP_DECLARE_SCHEMA(da572a7d156dda3a);
CAPNP_DECLARE_SCHEMA(ebbe5c04cf550c4f);
CAPNP_DECLARE_SCHEMA(a505ca401d1e8578);
CAPNP_DECLARE_SCHEMA(e1bd799bdfa95af3);
CAPNP_DECLARE_SCHEMA(a3fc446486ff277b);
CAPNP_DECLARE_SCHEMA(a590f4103f797b9b);

} // namespace schemas
} // namespace capnp

namespace mrp {
namespace std {

struct Byte {
  Byte() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aae043d52a4e8c60, 1, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct ByteMultiArray {
  ByteMultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b67e2ec602362112, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Char {
  Char() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98a0a20f340bb6c8, 1, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct ColorRGBA {
  ColorRGBA() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fcddd22e31ab4f70, 2, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Duration {
  Duration() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8fba5bceec2d81ff, 1, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Empty {
  Empty() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91883f029b2592f8, 0, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Float32MultiArray {
  Float32MultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1ada55891f92fbc, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Float64MultiArray {
  Float64MultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f26e720fc35cd246, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Header {
  Header() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf9a8bcf03922937, 1, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Int16MultiArray {
  Int16MultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cce4456a438dfada, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Int32MultiArray {
  Int32MultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97220a0c9cee8e22, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Int64MultiArray {
  Int64MultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(895053609043e89a, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Int8MultiArray {
  Int8MultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8454977525614501, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct MultiArrayDimension {
  MultiArrayDimension() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da16d19a39e3c483, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct MultiArrayLayout {
  MultiArrayLayout() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f28620b89bed09ac, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct String {
  String() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da572a7d156dda3a, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct Time {
  Time() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ebbe5c04cf550c4f, 1, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct UInt16MultiArray {
  UInt16MultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a505ca401d1e8578, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct UInt32MultiArray {
  UInt32MultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1bd799bdfa95af3, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct UInt64MultiArray {
  UInt64MultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a3fc446486ff277b, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct UInt8MultiArray {
  UInt8MultiArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a590f4103f797b9b, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

// =======================================================================================

class Byte::Reader {
public:
  typedef Byte Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline ::uint8_t getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Byte::Builder {
public:
  typedef Byte Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline ::uint8_t getData();
  inline void setData(::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Byte::Pipeline {
public:
  typedef Byte Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class ByteMultiArray::Reader {
public:
  typedef ByteMultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::mrp::std::MultiArrayLayout::Reader getLayout() const;

  inline bool hasData() const;
  inline ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ByteMultiArray::Builder {
public:
  typedef ByteMultiArray Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLayout();
  inline ::mrp::std::MultiArrayLayout::Builder getLayout();
  inline void setLayout(::mrp::std::MultiArrayLayout::Reader value);
  inline ::mrp::std::MultiArrayLayout::Builder initLayout();
  inline void
  adoptLayout(::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value);
  inline ::capnp::Orphan<::mrp::std::MultiArrayLayout> disownLayout();

  inline bool hasData();
  inline ::capnp::Data::Builder getData();
  inline void setData(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan<::capnp::Data> &&value);
  inline ::capnp::Orphan<::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ByteMultiArray::Pipeline {
public:
  typedef ByteMultiArray Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::MultiArrayLayout::Pipeline getLayout();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Char::Reader {
public:
  typedef Char Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline ::int8_t getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Char::Builder {
public:
  typedef Char Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline ::int8_t getData();
  inline void setData(::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Char::Pipeline {
public:
  typedef Char Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class ColorRGBA::Reader {
public:
  typedef ColorRGBA Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline float getR() const;

  inline float getG() const;

  inline float getB() const;

  inline float getA() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ColorRGBA::Builder {
public:
  typedef ColorRGBA Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline float getR();
  inline void setR(float value);

  inline float getG();
  inline void setG(float value);

  inline float getB();
  inline void setB(float value);

  inline float getA();
  inline void setA(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ColorRGBA::Pipeline {
public:
  typedef ColorRGBA Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Duration::Reader {
public:
  typedef Duration Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline ::int32_t getSec() const;

  inline ::int32_t getNsec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Duration::Builder {
public:
  typedef Duration Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline ::int32_t getSec();
  inline void setSec(::int32_t value);

  inline ::int32_t getNsec();
  inline void setNsec(::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Duration::Pipeline {
public:
  typedef Duration Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Empty::Reader {
public:
  typedef Empty Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Empty::Builder {
public:
  typedef Empty Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Empty::Pipeline {
public:
  typedef Empty Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Float32MultiArray::Reader {
public:
  typedef Float32MultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::mrp::std::MultiArrayLayout::Reader getLayout() const;

  inline bool hasData() const;
  inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Float32MultiArray::Builder {
public:
  typedef Float32MultiArray Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLayout();
  inline ::mrp::std::MultiArrayLayout::Builder getLayout();
  inline void setLayout(::mrp::std::MultiArrayLayout::Reader value);
  inline ::mrp::std::MultiArrayLayout::Builder initLayout();
  inline void
  adoptLayout(::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value);
  inline ::capnp::Orphan<::mrp::std::MultiArrayLayout> disownLayout();

  inline bool hasData();
  inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Builder getData();
  inline void
  setData(::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setData(::kj::ArrayPtr<const float> value);
  inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Builder
  initData(unsigned int size);
  inline void adoptData(
      ::capnp::Orphan<::capnp::List<float, ::capnp::Kind::PRIMITIVE>> &&value);
  inline ::capnp::Orphan<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>
  disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Float32MultiArray::Pipeline {
public:
  typedef Float32MultiArray Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::MultiArrayLayout::Pipeline getLayout();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Float64MultiArray::Reader {
public:
  typedef Float64MultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::mrp::std::MultiArrayLayout::Reader getLayout() const;

  inline bool hasData() const;
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
  getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Float64MultiArray::Builder {
public:
  typedef Float64MultiArray Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLayout();
  inline ::mrp::std::MultiArrayLayout::Builder getLayout();
  inline void setLayout(::mrp::std::MultiArrayLayout::Reader value);
  inline ::mrp::std::MultiArrayLayout::Builder initLayout();
  inline void
  adoptLayout(::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value);
  inline ::capnp::Orphan<::mrp::std::MultiArrayLayout> disownLayout();

  inline bool hasData();
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder getData();
  inline void
  setData(::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setData(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
  initData(unsigned int size);
  inline void adoptData(
      ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value);
  inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
  disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Float64MultiArray::Pipeline {
public:
  typedef Float64MultiArray Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::MultiArrayLayout::Pipeline getLayout();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Header::Reader {
public:
  typedef Header Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline ::uint32_t getSeq() const;

  inline bool hasStamp() const;
  inline ::mrp::std::Time::Reader getStamp() const;

  inline bool hasFrameId() const;
  inline ::capnp::Text::Reader getFrameId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Header::Builder {
public:
  typedef Header Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline ::uint32_t getSeq();
  inline void setSeq(::uint32_t value);

  inline bool hasStamp();
  inline ::mrp::std::Time::Builder getStamp();
  inline void setStamp(::mrp::std::Time::Reader value);
  inline ::mrp::std::Time::Builder initStamp();
  inline void adoptStamp(::capnp::Orphan<::mrp::std::Time> &&value);
  inline ::capnp::Orphan<::mrp::std::Time> disownStamp();

  inline bool hasFrameId();
  inline ::capnp::Text::Builder getFrameId();
  inline void setFrameId(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initFrameId(unsigned int size);
  inline void adoptFrameId(::capnp::Orphan<::capnp::Text> &&value);
  inline ::capnp::Orphan<::capnp::Text> disownFrameId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Header::Pipeline {
public:
  typedef Header Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::Time::Pipeline getStamp();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Int16MultiArray::Reader {
public:
  typedef Int16MultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::mrp::std::MultiArrayLayout::Reader getLayout() const;

  inline bool hasData() const;
  inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Reader
  getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Int16MultiArray::Builder {
public:
  typedef Int16MultiArray Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLayout();
  inline ::mrp::std::MultiArrayLayout::Builder getLayout();
  inline void setLayout(::mrp::std::MultiArrayLayout::Reader value);
  inline ::mrp::std::MultiArrayLayout::Builder initLayout();
  inline void
  adoptLayout(::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value);
  inline ::capnp::Orphan<::mrp::std::MultiArrayLayout> disownLayout();

  inline bool hasData();
  inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Builder getData();
  inline void
  setData(::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setData(::kj::ArrayPtr<const ::int16_t> value);
  inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Builder
  initData(unsigned int size);
  inline void
  adoptData(::capnp::Orphan<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>
                &&value);
  inline ::capnp::Orphan<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>
  disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Int16MultiArray::Pipeline {
public:
  typedef Int16MultiArray Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::MultiArrayLayout::Pipeline getLayout();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Int32MultiArray::Reader {
public:
  typedef Int32MultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::mrp::std::MultiArrayLayout::Reader getLayout() const;

  inline bool hasData() const;
  inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader
  getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Int32MultiArray::Builder {
public:
  typedef Int32MultiArray Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLayout();
  inline ::mrp::std::MultiArrayLayout::Builder getLayout();
  inline void setLayout(::mrp::std::MultiArrayLayout::Reader value);
  inline ::mrp::std::MultiArrayLayout::Builder initLayout();
  inline void
  adoptLayout(::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value);
  inline ::capnp::Orphan<::mrp::std::MultiArrayLayout> disownLayout();

  inline bool hasData();
  inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder getData();
  inline void
  setData(::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setData(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder
  initData(unsigned int size);
  inline void
  adoptData(::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>
                &&value);
  inline ::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>
  disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Int32MultiArray::Pipeline {
public:
  typedef Int32MultiArray Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::MultiArrayLayout::Pipeline getLayout();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Int64MultiArray::Reader {
public:
  typedef Int64MultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::mrp::std::MultiArrayLayout::Reader getLayout() const;

  inline bool hasData() const;
  inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Int64MultiArray::Builder {
public:
  typedef Int64MultiArray Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLayout();
  inline ::mrp::std::MultiArrayLayout::Builder getLayout();
  inline void setLayout(::mrp::std::MultiArrayLayout::Reader value);
  inline ::mrp::std::MultiArrayLayout::Builder initLayout();
  inline void
  adoptLayout(::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value);
  inline ::capnp::Orphan<::mrp::std::MultiArrayLayout> disownLayout();

  inline bool hasData();
  inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Builder getData();
  inline void
  setData(::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setData(::kj::ArrayPtr<const ::int64_t> value);
  inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initData(unsigned int size);
  inline void
  adoptData(::capnp::Orphan<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>
                &&value);
  inline ::capnp::Orphan<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>
  disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Int64MultiArray::Pipeline {
public:
  typedef Int64MultiArray Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::MultiArrayLayout::Pipeline getLayout();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Int8MultiArray::Reader {
public:
  typedef Int8MultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::mrp::std::MultiArrayLayout::Reader getLayout() const;

  inline bool hasData() const;
  inline ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Int8MultiArray::Builder {
public:
  typedef Int8MultiArray Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLayout();
  inline ::mrp::std::MultiArrayLayout::Builder getLayout();
  inline void setLayout(::mrp::std::MultiArrayLayout::Reader value);
  inline ::mrp::std::MultiArrayLayout::Builder initLayout();
  inline void
  adoptLayout(::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value);
  inline ::capnp::Orphan<::mrp::std::MultiArrayLayout> disownLayout();

  inline bool hasData();
  inline ::capnp::Data::Builder getData();
  inline void setData(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan<::capnp::Data> &&value);
  inline ::capnp::Orphan<::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Int8MultiArray::Pipeline {
public:
  typedef Int8MultiArray Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::MultiArrayLayout::Pipeline getLayout();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class MultiArrayDimension::Reader {
public:
  typedef MultiArrayDimension Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLabel() const;
  inline ::capnp::Text::Reader getLabel() const;

  inline ::uint32_t getSize() const;

  inline ::uint32_t getStride() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MultiArrayDimension::Builder {
public:
  typedef MultiArrayDimension Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLabel();
  inline ::capnp::Text::Builder getLabel();
  inline void setLabel(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initLabel(unsigned int size);
  inline void adoptLabel(::capnp::Orphan<::capnp::Text> &&value);
  inline ::capnp::Orphan<::capnp::Text> disownLabel();

  inline ::uint32_t getSize();
  inline void setSize(::uint32_t value);

  inline ::uint32_t getStride();
  inline void setStride(::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MultiArrayDimension::Pipeline {
public:
  typedef MultiArrayDimension Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class MultiArrayLayout::Reader {
public:
  typedef MultiArrayLayout Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasDim() const;
  inline ::capnp::List<::mrp::std::MultiArrayDimension,
                       ::capnp::Kind::STRUCT>::Reader
  getDim() const;

  inline ::uint32_t getDataOffset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MultiArrayLayout::Builder {
public:
  typedef MultiArrayLayout Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasDim();
  inline ::capnp::List<::mrp::std::MultiArrayDimension,
                       ::capnp::Kind::STRUCT>::Builder
  getDim();
  inline void setDim(::capnp::List<::mrp::std::MultiArrayDimension,
                                   ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<::mrp::std::MultiArrayDimension,
                       ::capnp::Kind::STRUCT>::Builder
  initDim(unsigned int size);
  inline void
  adoptDim(::capnp::Orphan<::capnp::List<::mrp::std::MultiArrayDimension,
                                         ::capnp::Kind::STRUCT>> &&value);
  inline ::capnp::Orphan<
      ::capnp::List<::mrp::std::MultiArrayDimension, ::capnp::Kind::STRUCT>>
  disownDim();

  inline ::uint32_t getDataOffset();
  inline void setDataOffset(::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MultiArrayLayout::Pipeline {
public:
  typedef MultiArrayLayout Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class String::Reader {
public:
  typedef String Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasData() const;
  inline ::capnp::Text::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class String::Builder {
public:
  typedef String Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasData();
  inline ::capnp::Text::Builder getData();
  inline void setData(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan<::capnp::Text> &&value);
  inline ::capnp::Orphan<::capnp::Text> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class String::Pipeline {
public:
  typedef String Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Time::Reader {
public:
  typedef Time Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline ::uint32_t getSec() const;

  inline ::uint32_t getNsec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Time::Builder {
public:
  typedef Time Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline ::uint32_t getSec();
  inline void setSec(::uint32_t value);

  inline ::uint32_t getNsec();
  inline void setNsec(::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Time::Pipeline {
public:
  typedef Time Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class UInt16MultiArray::Reader {
public:
  typedef UInt16MultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::mrp::std::MultiArrayLayout::Reader getLayout() const;

  inline bool hasData() const;
  inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Reader
  getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UInt16MultiArray::Builder {
public:
  typedef UInt16MultiArray Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLayout();
  inline ::mrp::std::MultiArrayLayout::Builder getLayout();
  inline void setLayout(::mrp::std::MultiArrayLayout::Reader value);
  inline ::mrp::std::MultiArrayLayout::Builder initLayout();
  inline void
  adoptLayout(::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value);
  inline ::capnp::Orphan<::mrp::std::MultiArrayLayout> disownLayout();

  inline bool hasData();
  inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Builder getData();
  inline void
  setData(::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setData(::kj::ArrayPtr<const ::uint16_t> value);
  inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Builder
  initData(unsigned int size);
  inline void
  adoptData(::capnp::Orphan<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>
                &&value);
  inline ::capnp::Orphan<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>
  disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UInt16MultiArray::Pipeline {
public:
  typedef UInt16MultiArray Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::MultiArrayLayout::Pipeline getLayout();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class UInt32MultiArray::Reader {
public:
  typedef UInt32MultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::mrp::std::MultiArrayLayout::Reader getLayout() const;

  inline bool hasData() const;
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader
  getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UInt32MultiArray::Builder {
public:
  typedef UInt32MultiArray Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLayout();
  inline ::mrp::std::MultiArrayLayout::Builder getLayout();
  inline void setLayout(::mrp::std::MultiArrayLayout::Reader value);
  inline ::mrp::std::MultiArrayLayout::Builder initLayout();
  inline void
  adoptLayout(::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value);
  inline ::capnp::Orphan<::mrp::std::MultiArrayLayout> disownLayout();

  inline bool hasData();
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder getData();
  inline void
  setData(::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setData(::kj::ArrayPtr<const ::uint32_t> value);
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
  initData(unsigned int size);
  inline void
  adoptData(::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
                &&value);
  inline ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
  disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UInt32MultiArray::Pipeline {
public:
  typedef UInt32MultiArray Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::MultiArrayLayout::Pipeline getLayout();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class UInt64MultiArray::Reader {
public:
  typedef UInt64MultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::mrp::std::MultiArrayLayout::Reader getLayout() const;

  inline bool hasData() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UInt64MultiArray::Builder {
public:
  typedef UInt64MultiArray Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLayout();
  inline ::mrp::std::MultiArrayLayout::Builder getLayout();
  inline void setLayout(::mrp::std::MultiArrayLayout::Reader value);
  inline ::mrp::std::MultiArrayLayout::Builder initLayout();
  inline void
  adoptLayout(::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value);
  inline ::capnp::Orphan<::mrp::std::MultiArrayLayout> disownLayout();

  inline bool hasData();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder getData();
  inline void
  setData(::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setData(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initData(unsigned int size);
  inline void
  adoptData(::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
                &&value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UInt64MultiArray::Pipeline {
public:
  typedef UInt64MultiArray Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::MultiArrayLayout::Pipeline getLayout();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class UInt8MultiArray::Reader {
public:
  typedef UInt8MultiArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::mrp::std::MultiArrayLayout::Reader getLayout() const;

  inline bool hasData() const;
  inline ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UInt8MultiArray::Builder {
public:
  typedef UInt8MultiArray Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasLayout();
  inline ::mrp::std::MultiArrayLayout::Builder getLayout();
  inline void setLayout(::mrp::std::MultiArrayLayout::Reader value);
  inline ::mrp::std::MultiArrayLayout::Builder initLayout();
  inline void
  adoptLayout(::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value);
  inline ::capnp::Orphan<::mrp::std::MultiArrayLayout> disownLayout();

  inline bool hasData();
  inline ::capnp::Data::Builder getData();
  inline void setData(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan<::capnp::Data> &&value);
  inline ::capnp::Orphan<::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UInt8MultiArray::Pipeline {
public:
  typedef UInt8MultiArray Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::MultiArrayLayout::Pipeline getLayout();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

// =======================================================================================

inline ::uint8_t Byte::Reader::getData() const {
  return _reader.getDataField<::uint8_t>(::capnp::bounded<0>() *
                                         ::capnp::ELEMENTS);
}

inline ::uint8_t Byte::Builder::getData() {
  return _builder.getDataField<::uint8_t>(::capnp::bounded<0>() *
                                          ::capnp::ELEMENTS);
}
inline void Byte::Builder::setData(::uint8_t value) {
  _builder.setDataField<::uint8_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS,
                                   value);
}

inline bool ByteMultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ByteMultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::MultiArrayLayout::Reader
ByteMultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::MultiArrayLayout::Builder
ByteMultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::MultiArrayLayout::Pipeline
ByteMultiArray::Pipeline::getLayout() {
  return ::mrp::std::MultiArrayLayout::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void
ByteMultiArray::Builder::setLayout(::mrp::std::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::MultiArrayLayout::Builder
ByteMultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ByteMultiArray::Builder::adoptLayout(
    ::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::MultiArrayLayout>
ByteMultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ByteMultiArray::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ByteMultiArray::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader ByteMultiArray::Reader::getData() const {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder ByteMultiArray::Builder::getData() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ByteMultiArray::Builder::setData(::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder
ByteMultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void
ByteMultiArray::Builder::adoptData(::capnp::Orphan<::capnp::Data> &&value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> ByteMultiArray::Builder::disownData() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline ::int8_t Char::Reader::getData() const {
  return _reader.getDataField<::int8_t>(::capnp::bounded<0>() *
                                        ::capnp::ELEMENTS);
}

inline ::int8_t Char::Builder::getData() {
  return _builder.getDataField<::int8_t>(::capnp::bounded<0>() *
                                         ::capnp::ELEMENTS);
}
inline void Char::Builder::setData(::int8_t value) {
  _builder.setDataField<::int8_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS,
                                  value);
}

inline float ColorRGBA::Reader::getR() const {
  return _reader.getDataField<float>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ColorRGBA::Builder::getR() {
  return _builder.getDataField<float>(::capnp::bounded<0>() *
                                      ::capnp::ELEMENTS);
}
inline void ColorRGBA::Builder::setR(float value) {
  _builder.setDataField<float>(::capnp::bounded<0>() * ::capnp::ELEMENTS,
                               value);
}

inline float ColorRGBA::Reader::getG() const {
  return _reader.getDataField<float>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ColorRGBA::Builder::getG() {
  return _builder.getDataField<float>(::capnp::bounded<1>() *
                                      ::capnp::ELEMENTS);
}
inline void ColorRGBA::Builder::setG(float value) {
  _builder.setDataField<float>(::capnp::bounded<1>() * ::capnp::ELEMENTS,
                               value);
}

inline float ColorRGBA::Reader::getB() const {
  return _reader.getDataField<float>(::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float ColorRGBA::Builder::getB() {
  return _builder.getDataField<float>(::capnp::bounded<2>() *
                                      ::capnp::ELEMENTS);
}
inline void ColorRGBA::Builder::setB(float value) {
  _builder.setDataField<float>(::capnp::bounded<2>() * ::capnp::ELEMENTS,
                               value);
}

inline float ColorRGBA::Reader::getA() const {
  return _reader.getDataField<float>(::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ColorRGBA::Builder::getA() {
  return _builder.getDataField<float>(::capnp::bounded<3>() *
                                      ::capnp::ELEMENTS);
}
inline void ColorRGBA::Builder::setA(float value) {
  _builder.setDataField<float>(::capnp::bounded<3>() * ::capnp::ELEMENTS,
                               value);
}

inline ::int32_t Duration::Reader::getSec() const {
  return _reader.getDataField<::int32_t>(::capnp::bounded<0>() *
                                         ::capnp::ELEMENTS);
}

inline ::int32_t Duration::Builder::getSec() {
  return _builder.getDataField<::int32_t>(::capnp::bounded<0>() *
                                          ::capnp::ELEMENTS);
}
inline void Duration::Builder::setSec(::int32_t value) {
  _builder.setDataField<::int32_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS,
                                   value);
}

inline ::int32_t Duration::Reader::getNsec() const {
  return _reader.getDataField<::int32_t>(::capnp::bounded<1>() *
                                         ::capnp::ELEMENTS);
}

inline ::int32_t Duration::Builder::getNsec() {
  return _builder.getDataField<::int32_t>(::capnp::bounded<1>() *
                                          ::capnp::ELEMENTS);
}
inline void Duration::Builder::setNsec(::int32_t value) {
  _builder.setDataField<::int32_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS,
                                   value);
}

inline bool Float32MultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Float32MultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::MultiArrayLayout::Reader
Float32MultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::MultiArrayLayout::Builder
Float32MultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::MultiArrayLayout::Pipeline
Float32MultiArray::Pipeline::getLayout() {
  return ::mrp::std::MultiArrayLayout::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void Float32MultiArray::Builder::setLayout(
    ::mrp::std::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::MultiArrayLayout::Builder
Float32MultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Float32MultiArray::Builder::adoptLayout(
    ::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::MultiArrayLayout>
Float32MultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Float32MultiArray::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Float32MultiArray::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Reader
Float32MultiArray::Reader::getData() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Builder
Float32MultiArray::Builder::getData() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Float32MultiArray::Builder::setData(
    ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void
Float32MultiArray::Builder::setData(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Builder
Float32MultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void Float32MultiArray::Builder::adoptData(
    ::capnp::Orphan<::capnp::List<float, ::capnp::Kind::PRIMITIVE>> &&value) {
  ::capnp::_::PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>
Float32MultiArray::Builder::disownData() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Float64MultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Float64MultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::MultiArrayLayout::Reader
Float64MultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::MultiArrayLayout::Builder
Float64MultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::MultiArrayLayout::Pipeline
Float64MultiArray::Pipeline::getLayout() {
  return ::mrp::std::MultiArrayLayout::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void Float64MultiArray::Builder::setLayout(
    ::mrp::std::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::MultiArrayLayout::Builder
Float64MultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Float64MultiArray::Builder::adoptLayout(
    ::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::MultiArrayLayout>
Float64MultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Float64MultiArray::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Float64MultiArray::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
Float64MultiArray::Reader::getData() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
Float64MultiArray::Builder::getData() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Float64MultiArray::Builder::setData(
    ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void
Float64MultiArray::Builder::setData(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
Float64MultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void Float64MultiArray::Builder::adoptData(
    ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
Float64MultiArray::Builder::disownData() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline ::uint32_t Header::Reader::getSeq() const {
  return _reader.getDataField<::uint32_t>(::capnp::bounded<0>() *
                                          ::capnp::ELEMENTS);
}

inline ::uint32_t Header::Builder::getSeq() {
  return _builder.getDataField<::uint32_t>(::capnp::bounded<0>() *
                                           ::capnp::ELEMENTS);
}
inline void Header::Builder::setSeq(::uint32_t value) {
  _builder.setDataField<::uint32_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS,
                                    value);
}

inline bool Header::Reader::hasStamp() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Header::Builder::hasStamp() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::Time::Reader Header::Reader::getStamp() const {
  return ::capnp::_::PointerHelpers<::mrp::std::Time>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::Time::Builder Header::Builder::getStamp() {
  return ::capnp::_::PointerHelpers<::mrp::std::Time>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::Time::Pipeline Header::Pipeline::getStamp() {
  return ::mrp::std::Time::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void Header::Builder::setStamp(::mrp::std::Time::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::Time>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::Time::Builder Header::Builder::initStamp() {
  return ::capnp::_::PointerHelpers<::mrp::std::Time>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void
Header::Builder::adoptStamp(::capnp::Orphan<::mrp::std::Time> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::Time>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::Time> Header::Builder::disownStamp() {
  return ::capnp::_::PointerHelpers<::mrp::std::Time>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Header::Reader::hasFrameId() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Header::Builder::hasFrameId() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Header::Reader::getFrameId() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Header::Builder::getFrameId() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Header::Builder::setFrameId(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Header::Builder::initFrameId(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void
Header::Builder::adoptFrameId(::capnp::Orphan<::capnp::Text> &&value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Header::Builder::disownFrameId() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Int16MultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Int16MultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::MultiArrayLayout::Reader
Int16MultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::MultiArrayLayout::Builder
Int16MultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::MultiArrayLayout::Pipeline
Int16MultiArray::Pipeline::getLayout() {
  return ::mrp::std::MultiArrayLayout::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void Int16MultiArray::Builder::setLayout(
    ::mrp::std::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::MultiArrayLayout::Builder
Int16MultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Int16MultiArray::Builder::adoptLayout(
    ::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::MultiArrayLayout>
Int16MultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Int16MultiArray::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Int16MultiArray::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Reader
Int16MultiArray::Reader::getData() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Builder
Int16MultiArray::Builder::getData() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Int16MultiArray::Builder::setData(
    ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void
Int16MultiArray::Builder::setData(::kj::ArrayPtr<const ::int16_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Builder
Int16MultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void Int16MultiArray::Builder::adoptData(
    ::capnp::Orphan<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>
        &&value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>
Int16MultiArray::Builder::disownData() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Int32MultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Int32MultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::MultiArrayLayout::Reader
Int32MultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::MultiArrayLayout::Builder
Int32MultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::MultiArrayLayout::Pipeline
Int32MultiArray::Pipeline::getLayout() {
  return ::mrp::std::MultiArrayLayout::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void Int32MultiArray::Builder::setLayout(
    ::mrp::std::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::MultiArrayLayout::Builder
Int32MultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Int32MultiArray::Builder::adoptLayout(
    ::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::MultiArrayLayout>
Int32MultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Int32MultiArray::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Int32MultiArray::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader
Int32MultiArray::Reader::getData() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder
Int32MultiArray::Builder::getData() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Int32MultiArray::Builder::setData(
    ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void
Int32MultiArray::Builder::setData(::kj::ArrayPtr<const ::int32_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder
Int32MultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void Int32MultiArray::Builder::adoptData(
    ::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>
        &&value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>
Int32MultiArray::Builder::disownData() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Int64MultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Int64MultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::MultiArrayLayout::Reader
Int64MultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::MultiArrayLayout::Builder
Int64MultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::MultiArrayLayout::Pipeline
Int64MultiArray::Pipeline::getLayout() {
  return ::mrp::std::MultiArrayLayout::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void Int64MultiArray::Builder::setLayout(
    ::mrp::std::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::MultiArrayLayout::Builder
Int64MultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Int64MultiArray::Builder::adoptLayout(
    ::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::MultiArrayLayout>
Int64MultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Int64MultiArray::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Int64MultiArray::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Reader
Int64MultiArray::Reader::getData() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Builder
Int64MultiArray::Builder::getData() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Int64MultiArray::Builder::setData(
    ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void
Int64MultiArray::Builder::setData(::kj::ArrayPtr<const ::int64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Builder
Int64MultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void Int64MultiArray::Builder::adoptData(
    ::capnp::Orphan<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>
        &&value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>
Int64MultiArray::Builder::disownData() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Int8MultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Int8MultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::MultiArrayLayout::Reader
Int8MultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::MultiArrayLayout::Builder
Int8MultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::MultiArrayLayout::Pipeline
Int8MultiArray::Pipeline::getLayout() {
  return ::mrp::std::MultiArrayLayout::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void
Int8MultiArray::Builder::setLayout(::mrp::std::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::MultiArrayLayout::Builder
Int8MultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Int8MultiArray::Builder::adoptLayout(
    ::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::MultiArrayLayout>
Int8MultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Int8MultiArray::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Int8MultiArray::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader Int8MultiArray::Reader::getData() const {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder Int8MultiArray::Builder::getData() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Int8MultiArray::Builder::setData(::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder
Int8MultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void
Int8MultiArray::Builder::adoptData(::capnp::Orphan<::capnp::Data> &&value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> Int8MultiArray::Builder::disownData() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool MultiArrayDimension::Reader::hasLabel() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiArrayDimension::Builder::hasLabel() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader MultiArrayDimension::Reader::getLabel() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder MultiArrayDimension::Builder::getLabel() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void
MultiArrayDimension::Builder::setLabel(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder
MultiArrayDimension::Builder::initLabel(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MultiArrayDimension::Builder::adoptLabel(
    ::capnp::Orphan<::capnp::Text> &&value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
MultiArrayDimension::Builder::disownLabel() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint32_t MultiArrayDimension::Reader::getSize() const {
  return _reader.getDataField<::uint32_t>(::capnp::bounded<0>() *
                                          ::capnp::ELEMENTS);
}

inline ::uint32_t MultiArrayDimension::Builder::getSize() {
  return _builder.getDataField<::uint32_t>(::capnp::bounded<0>() *
                                           ::capnp::ELEMENTS);
}
inline void MultiArrayDimension::Builder::setSize(::uint32_t value) {
  _builder.setDataField<::uint32_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS,
                                    value);
}

inline ::uint32_t MultiArrayDimension::Reader::getStride() const {
  return _reader.getDataField<::uint32_t>(::capnp::bounded<1>() *
                                          ::capnp::ELEMENTS);
}

inline ::uint32_t MultiArrayDimension::Builder::getStride() {
  return _builder.getDataField<::uint32_t>(::capnp::bounded<1>() *
                                           ::capnp::ELEMENTS);
}
inline void MultiArrayDimension::Builder::setStride(::uint32_t value) {
  _builder.setDataField<::uint32_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS,
                                    value);
}

inline bool MultiArrayLayout::Reader::hasDim() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiArrayLayout::Builder::hasDim() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::mrp::std::MultiArrayDimension,
                     ::capnp::Kind::STRUCT>::Reader
MultiArrayLayout::Reader::getDim() const {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::std::MultiArrayDimension, ::capnp::Kind::STRUCT>>::
      get(_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::mrp::std::MultiArrayDimension,
                     ::capnp::Kind::STRUCT>::Builder
MultiArrayLayout::Builder::getDim() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::std::MultiArrayDimension, ::capnp::Kind::STRUCT>>::
      get(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MultiArrayLayout::Builder::setDim(
    ::capnp::List<::mrp::std::MultiArrayDimension,
                  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::std::MultiArrayDimension, ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::mrp::std::MultiArrayDimension,
                     ::capnp::Kind::STRUCT>::Builder
MultiArrayLayout::Builder::initDim(unsigned int size) {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::std::MultiArrayDimension, ::capnp::Kind::STRUCT>>::
      init(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
           size);
}
inline void MultiArrayLayout::Builder::adoptDim(
    ::capnp::Orphan<::capnp::List<::mrp::std::MultiArrayDimension,
                                  ::capnp::Kind::STRUCT>> &&value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::std::MultiArrayDimension, ::capnp::Kind::STRUCT>>::
      adopt(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<
    ::capnp::List<::mrp::std::MultiArrayDimension, ::capnp::Kind::STRUCT>>
MultiArrayLayout::Builder::disownDim() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::std::MultiArrayDimension, ::capnp::Kind::STRUCT>>::
      disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint32_t MultiArrayLayout::Reader::getDataOffset() const {
  return _reader.getDataField<::uint32_t>(::capnp::bounded<0>() *
                                          ::capnp::ELEMENTS);
}

inline ::uint32_t MultiArrayLayout::Builder::getDataOffset() {
  return _builder.getDataField<::uint32_t>(::capnp::bounded<0>() *
                                           ::capnp::ELEMENTS);
}
inline void MultiArrayLayout::Builder::setDataOffset(::uint32_t value) {
  _builder.setDataField<::uint32_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS,
                                    value);
}

inline bool String::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool String::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader String::Reader::getData() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder String::Builder::getData() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void String::Builder::setData(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder String::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void String::Builder::adoptData(::capnp::Orphan<::capnp::Text> &&value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> String::Builder::disownData() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint32_t Time::Reader::getSec() const {
  return _reader.getDataField<::uint32_t>(::capnp::bounded<0>() *
                                          ::capnp::ELEMENTS);
}

inline ::uint32_t Time::Builder::getSec() {
  return _builder.getDataField<::uint32_t>(::capnp::bounded<0>() *
                                           ::capnp::ELEMENTS);
}
inline void Time::Builder::setSec(::uint32_t value) {
  _builder.setDataField<::uint32_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS,
                                    value);
}

inline ::uint32_t Time::Reader::getNsec() const {
  return _reader.getDataField<::uint32_t>(::capnp::bounded<1>() *
                                          ::capnp::ELEMENTS);
}

inline ::uint32_t Time::Builder::getNsec() {
  return _builder.getDataField<::uint32_t>(::capnp::bounded<1>() *
                                           ::capnp::ELEMENTS);
}
inline void Time::Builder::setNsec(::uint32_t value) {
  _builder.setDataField<::uint32_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS,
                                    value);
}

inline bool UInt16MultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool UInt16MultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::MultiArrayLayout::Reader
UInt16MultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::MultiArrayLayout::Builder
UInt16MultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::MultiArrayLayout::Pipeline
UInt16MultiArray::Pipeline::getLayout() {
  return ::mrp::std::MultiArrayLayout::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void UInt16MultiArray::Builder::setLayout(
    ::mrp::std::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::MultiArrayLayout::Builder
UInt16MultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UInt16MultiArray::Builder::adoptLayout(
    ::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::MultiArrayLayout>
UInt16MultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UInt16MultiArray::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool UInt16MultiArray::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Reader
UInt16MultiArray::Reader::getData() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Builder
UInt16MultiArray::Builder::getData() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UInt16MultiArray::Builder::setData(
    ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void
UInt16MultiArray::Builder::setData(::kj::ArrayPtr<const ::uint16_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Builder
UInt16MultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void UInt16MultiArray::Builder::adoptData(
    ::capnp::Orphan<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>
        &&value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>
UInt16MultiArray::Builder::disownData() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UInt32MultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool UInt32MultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::MultiArrayLayout::Reader
UInt32MultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::MultiArrayLayout::Builder
UInt32MultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::MultiArrayLayout::Pipeline
UInt32MultiArray::Pipeline::getLayout() {
  return ::mrp::std::MultiArrayLayout::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void UInt32MultiArray::Builder::setLayout(
    ::mrp::std::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::MultiArrayLayout::Builder
UInt32MultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UInt32MultiArray::Builder::adoptLayout(
    ::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::MultiArrayLayout>
UInt32MultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UInt32MultiArray::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool UInt32MultiArray::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader
UInt32MultiArray::Reader::getData() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
UInt32MultiArray::Builder::getData() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UInt32MultiArray::Builder::setData(
    ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void
UInt32MultiArray::Builder::setData(::kj::ArrayPtr<const ::uint32_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
UInt32MultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void UInt32MultiArray::Builder::adoptData(
    ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
        &&value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
UInt32MultiArray::Builder::disownData() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UInt64MultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool UInt64MultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::MultiArrayLayout::Reader
UInt64MultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::MultiArrayLayout::Builder
UInt64MultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::MultiArrayLayout::Pipeline
UInt64MultiArray::Pipeline::getLayout() {
  return ::mrp::std::MultiArrayLayout::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void UInt64MultiArray::Builder::setLayout(
    ::mrp::std::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::MultiArrayLayout::Builder
UInt64MultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UInt64MultiArray::Builder::adoptLayout(
    ::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::MultiArrayLayout>
UInt64MultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UInt64MultiArray::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool UInt64MultiArray::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
UInt64MultiArray::Reader::getData() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
UInt64MultiArray::Builder::getData() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UInt64MultiArray::Builder::setData(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void
UInt64MultiArray::Builder::setData(::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
UInt64MultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void UInt64MultiArray::Builder::adoptData(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
        &&value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
UInt64MultiArray::Builder::disownData() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UInt8MultiArray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool UInt8MultiArray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::MultiArrayLayout::Reader
UInt8MultiArray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::MultiArrayLayout::Builder
UInt8MultiArray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::MultiArrayLayout::Pipeline
UInt8MultiArray::Pipeline::getLayout() {
  return ::mrp::std::MultiArrayLayout::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void UInt8MultiArray::Builder::setLayout(
    ::mrp::std::MultiArrayLayout::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::MultiArrayLayout::Builder
UInt8MultiArray::Builder::initLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UInt8MultiArray::Builder::adoptLayout(
    ::capnp::Orphan<::mrp::std::MultiArrayLayout> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::MultiArrayLayout>
UInt8MultiArray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::mrp::std::MultiArrayLayout>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UInt8MultiArray::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool UInt8MultiArray::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader UInt8MultiArray::Reader::getData() const {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder UInt8MultiArray::Builder::getData() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UInt8MultiArray::Builder::setData(::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder
UInt8MultiArray::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void
UInt8MultiArray::Builder::adoptData(::capnp::Orphan<::capnp::Data> &&value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> UInt8MultiArray::Builder::disownData() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

} // namespace std
} // namespace mrp

CAPNP_END_HEADER
