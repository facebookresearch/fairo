// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: trajectory_msgs.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error                                                                         \
    "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "geometry_msgs.capnp.h"
#include "std_msgs.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(85bc0f442bf3d0c7);
CAPNP_DECLARE_SCHEMA(c95fa324da26dc9b);
CAPNP_DECLARE_SCHEMA(f89d6f946cf774de);
CAPNP_DECLARE_SCHEMA(daf25555374195d5);

} // namespace schemas
} // namespace capnp

namespace mrp {
namespace trajectory {

struct JointTrajectory {
  JointTrajectory() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85bc0f442bf3d0c7, 0, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct JointTrajectoryPoint {
  JointTrajectoryPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c95fa324da26dc9b, 0, 5)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct MultiDOFJointTrajectory {
  MultiDOFJointTrajectory() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f89d6f946cf774de, 0, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

struct MultiDOFJointTrajectoryPoint {
  MultiDOFJointTrajectoryPoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(daf25555374195d5, 0, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const *brand() {
      return &schema->defaultBrand;
    }
#endif // !CAPNP_LITE
  };
};

// =======================================================================================

class JointTrajectory::Reader {
public:
  typedef JointTrajectory Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasHeader() const;
  inline ::mrp::std::Header::Reader getHeader() const;

  inline bool hasJointNames() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getJointNames() const;

  inline bool hasPoints() const;
  inline ::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                       ::capnp::Kind::STRUCT>::Reader
  getPoints() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JointTrajectory::Builder {
public:
  typedef JointTrajectory Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasHeader();
  inline ::mrp::std::Header::Builder getHeader();
  inline void setHeader(::mrp::std::Header::Reader value);
  inline ::mrp::std::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan<::mrp::std::Header> &&value);
  inline ::capnp::Orphan<::mrp::std::Header> disownHeader();

  inline bool hasJointNames();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getJointNames();
  inline void setJointNames(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setJointNames(::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initJointNames(unsigned int size);
  inline void adoptJointNames(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
          &&value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownJointNames();

  inline bool hasPoints();
  inline ::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                       ::capnp::Kind::STRUCT>::Builder
  getPoints();
  inline void setPoints(::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                                      ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                       ::capnp::Kind::STRUCT>::Builder
  initPoints(unsigned int size);
  inline void adoptPoints(
      ::capnp::Orphan<::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                                    ::capnp::Kind::STRUCT>> &&value);
  inline ::capnp::Orphan<::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                                       ::capnp::Kind::STRUCT>>
  disownPoints();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JointTrajectory::Pipeline {
public:
  typedef JointTrajectory Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::Header::Pipeline getHeader();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class JointTrajectoryPoint::Reader {
public:
  typedef JointTrajectoryPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasPositions() const;
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
  getPositions() const;

  inline bool hasVelocities() const;
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
  getVelocities() const;

  inline bool hasAccelerations() const;
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
  getAccelerations() const;

  inline bool hasEffort() const;
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
  getEffort() const;

  inline bool hasTimeFromStart() const;
  inline ::mrp::std::Duration::Reader getTimeFromStart() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JointTrajectoryPoint::Builder {
public:
  typedef JointTrajectoryPoint Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasPositions();
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
  getPositions();
  inline void
  setPositions(::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPositions(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
  initPositions(unsigned int size);
  inline void adoptPositions(
      ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value);
  inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
  disownPositions();

  inline bool hasVelocities();
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
  getVelocities();
  inline void
  setVelocities(::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVelocities(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
  initVelocities(unsigned int size);
  inline void adoptVelocities(
      ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value);
  inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
  disownVelocities();

  inline bool hasAccelerations();
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
  getAccelerations();
  inline void setAccelerations(
      ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAccelerations(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
  initAccelerations(unsigned int size);
  inline void adoptAccelerations(
      ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value);
  inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
  disownAccelerations();

  inline bool hasEffort();
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder getEffort();
  inline void
  setEffort(::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setEffort(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
  initEffort(unsigned int size);
  inline void adoptEffort(
      ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value);
  inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
  disownEffort();

  inline bool hasTimeFromStart();
  inline ::mrp::std::Duration::Builder getTimeFromStart();
  inline void setTimeFromStart(::mrp::std::Duration::Reader value);
  inline ::mrp::std::Duration::Builder initTimeFromStart();
  inline void adoptTimeFromStart(::capnp::Orphan<::mrp::std::Duration> &&value);
  inline ::capnp::Orphan<::mrp::std::Duration> disownTimeFromStart();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JointTrajectoryPoint::Pipeline {
public:
  typedef JointTrajectoryPoint Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::Duration::Pipeline getTimeFromStart();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class MultiDOFJointTrajectory::Reader {
public:
  typedef MultiDOFJointTrajectory Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasHeader() const;
  inline ::mrp::std::Header::Reader getHeader() const;

  inline bool hasJointNames() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getJointNames() const;

  inline bool hasPoints() const;
  inline ::capnp::List<::mrp::trajectory::MultiDOFJointTrajectoryPoint,
                       ::capnp::Kind::STRUCT>::Reader
  getPoints() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MultiDOFJointTrajectory::Builder {
public:
  typedef MultiDOFJointTrajectory Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasHeader();
  inline ::mrp::std::Header::Builder getHeader();
  inline void setHeader(::mrp::std::Header::Reader value);
  inline ::mrp::std::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan<::mrp::std::Header> &&value);
  inline ::capnp::Orphan<::mrp::std::Header> disownHeader();

  inline bool hasJointNames();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getJointNames();
  inline void setJointNames(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setJointNames(::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initJointNames(unsigned int size);
  inline void adoptJointNames(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
          &&value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownJointNames();

  inline bool hasPoints();
  inline ::capnp::List<::mrp::trajectory::MultiDOFJointTrajectoryPoint,
                       ::capnp::Kind::STRUCT>::Builder
  getPoints();
  inline void
  setPoints(::capnp::List<::mrp::trajectory::MultiDOFJointTrajectoryPoint,
                          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<::mrp::trajectory::MultiDOFJointTrajectoryPoint,
                       ::capnp::Kind::STRUCT>::Builder
  initPoints(unsigned int size);
  inline void
  adoptPoints(::capnp::Orphan<
              ::capnp::List<::mrp::trajectory::MultiDOFJointTrajectoryPoint,
                            ::capnp::Kind::STRUCT>> &&value);
  inline ::capnp::Orphan<::capnp::List<
      ::mrp::trajectory::MultiDOFJointTrajectoryPoint, ::capnp::Kind::STRUCT>>
  disownPoints();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MultiDOFJointTrajectory::Pipeline {
public:
  typedef MultiDOFJointTrajectory Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::Header::Pipeline getHeader();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class MultiDOFJointTrajectoryPoint::Reader {
public:
  typedef MultiDOFJointTrajectoryPoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base) : _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif // !CAPNP_LITE

  inline bool hasTransforms() const;
  inline ::capnp::List<::mrp::geometry::Transform,
                       ::capnp::Kind::STRUCT>::Reader
  getTransforms() const;

  inline bool hasVelocities() const;
  inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Reader
  getVelocities() const;

  inline bool hasAccelerations() const;
  inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Reader
  getAccelerations() const;

  inline bool hasTimeFromStart() const;
  inline ::mrp::std::Duration::Reader getTimeFromStart() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind> friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MultiDOFJointTrajectoryPoint::Builder {
public:
  typedef MultiDOFJointTrajectoryPoint Builds;

  Builder() = delete; // Deleted to discourage incorrect usage.
                      // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base) : _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif // !CAPNP_LITE

  inline bool hasTransforms();
  inline ::capnp::List<::mrp::geometry::Transform,
                       ::capnp::Kind::STRUCT>::Builder
  getTransforms();
  inline void setTransforms(::capnp::List<::mrp::geometry::Transform,
                                          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<::mrp::geometry::Transform,
                       ::capnp::Kind::STRUCT>::Builder
  initTransforms(unsigned int size);
  inline void adoptTransforms(
      ::capnp::Orphan<::capnp::List<::mrp::geometry::Transform,
                                    ::capnp::Kind::STRUCT>> &&value);
  inline ::capnp::Orphan<
      ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>>
  disownTransforms();

  inline bool hasVelocities();
  inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Builder
  getVelocities();
  inline void setVelocities(::capnp::List<::mrp::geometry::Twist,
                                          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Builder
  initVelocities(unsigned int size);
  inline void adoptVelocities(
      ::capnp::Orphan<::capnp::List<::mrp::geometry::Twist,
                                    ::capnp::Kind::STRUCT>> &&value);
  inline ::capnp::Orphan<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>
  disownVelocities();

  inline bool hasAccelerations();
  inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Builder
  getAccelerations();
  inline void
  setAccelerations(::capnp::List<::mrp::geometry::Twist,
                                 ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Builder
  initAccelerations(unsigned int size);
  inline void adoptAccelerations(
      ::capnp::Orphan<::capnp::List<::mrp::geometry::Twist,
                                    ::capnp::Kind::STRUCT>> &&value);
  inline ::capnp::Orphan<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>
  disownAccelerations();

  inline bool hasTimeFromStart();
  inline ::mrp::std::Duration::Builder getTimeFromStart();
  inline void setTimeFromStart(::mrp::std::Duration::Reader value);
  inline ::mrp::std::Duration::Builder initTimeFromStart();
  inline void adoptTimeFromStart(::capnp::Orphan<::mrp::std::Duration> &&value);
  inline ::capnp::Orphan<::mrp::std::Duration> disownTimeFromStart();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind> friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MultiDOFJointTrajectoryPoint::Pipeline {
public:
  typedef MultiDOFJointTrajectoryPoint Pipelines;

  inline Pipeline(decltype(nullptr)) : _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline &&typeless)
      : _typeless(kj::mv(typeless)) {}

  inline ::mrp::std::Duration::Pipeline getTimeFromStart();

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind> friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

// =======================================================================================

inline bool JointTrajectory::Reader::hasHeader() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool JointTrajectory::Builder::hasHeader() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::Header::Reader JointTrajectory::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers<::mrp::std::Header>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::Header::Builder JointTrajectory::Builder::getHeader() {
  return ::capnp::_::PointerHelpers<::mrp::std::Header>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::Header::Pipeline JointTrajectory::Pipeline::getHeader() {
  return ::mrp::std::Header::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void
JointTrajectory::Builder::setHeader(::mrp::std::Header::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::Header>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::Header::Builder JointTrajectory::Builder::initHeader() {
  return ::capnp::_::PointerHelpers<::mrp::std::Header>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void JointTrajectory::Builder::adoptHeader(
    ::capnp::Orphan<::mrp::std::Header> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::Header>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::Header>
JointTrajectory::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers<::mrp::std::Header>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool JointTrajectory::Reader::hasJointNames() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool JointTrajectory::Builder::hasJointNames() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
JointTrajectory::Reader::getJointNames() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
JointTrajectory::Builder::getJointNames() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void JointTrajectory::Builder::setJointNames(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void JointTrajectory::Builder::setJointNames(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
JointTrajectory::Builder::initJointNames(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void JointTrajectory::Builder::adoptJointNames(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
        &&value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
JointTrajectory::Builder::disownJointNames() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool JointTrajectory::Reader::hasPoints() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool JointTrajectory::Builder::hasPoints() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                     ::capnp::Kind::STRUCT>::Reader
JointTrajectory::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::JointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      get(_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                     ::capnp::Kind::STRUCT>::Builder
JointTrajectory::Builder::getPoints() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::JointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      get(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void JointTrajectory::Builder::setPoints(
    ::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::JointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                     ::capnp::Kind::STRUCT>::Builder
JointTrajectory::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::JointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      init(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
           size);
}
inline void JointTrajectory::Builder::adoptPoints(
    ::capnp::Orphan<::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                                  ::capnp::Kind::STRUCT>> &&value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::JointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      adopt(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::mrp::trajectory::JointTrajectoryPoint,
                                     ::capnp::Kind::STRUCT>>
JointTrajectory::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::JointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool JointTrajectoryPoint::Reader::hasPositions() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool JointTrajectoryPoint::Builder::hasPositions() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
JointTrajectoryPoint::Reader::getPositions() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
JointTrajectoryPoint::Builder::getPositions() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void JointTrajectoryPoint::Builder::setPositions(
    ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void JointTrajectoryPoint::Builder::setPositions(
    ::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
JointTrajectoryPoint::Builder::initPositions(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void JointTrajectoryPoint::Builder::adoptPositions(
    ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
JointTrajectoryPoint::Builder::disownPositions() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool JointTrajectoryPoint::Reader::hasVelocities() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool JointTrajectoryPoint::Builder::hasVelocities() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
JointTrajectoryPoint::Reader::getVelocities() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
JointTrajectoryPoint::Builder::getVelocities() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void JointTrajectoryPoint::Builder::setVelocities(
    ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void JointTrajectoryPoint::Builder::setVelocities(
    ::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
JointTrajectoryPoint::Builder::initVelocities(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void JointTrajectoryPoint::Builder::adoptVelocities(
    ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
JointTrajectoryPoint::Builder::disownVelocities() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool JointTrajectoryPoint::Reader::hasAccelerations() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool JointTrajectoryPoint::Builder::hasAccelerations() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
JointTrajectoryPoint::Reader::getAccelerations() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
JointTrajectoryPoint::Builder::getAccelerations() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void JointTrajectoryPoint::Builder::setAccelerations(
    ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline void JointTrajectoryPoint::Builder::setAccelerations(
    ::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
JointTrajectoryPoint::Builder::initAccelerations(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          size);
}
inline void JointTrajectoryPoint::Builder::adoptAccelerations(
    ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
JointTrajectoryPoint::Builder::disownAccelerations() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool JointTrajectoryPoint::Reader::hasEffort() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool JointTrajectoryPoint::Builder::hasEffort() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
JointTrajectoryPoint::Reader::getEffort() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
JointTrajectoryPoint::Builder::getEffort() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void JointTrajectoryPoint::Builder::setEffort(
    ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline void
JointTrajectoryPoint::Builder::setEffort(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
JointTrajectoryPoint::Builder::initEffort(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void JointTrajectoryPoint::Builder::adoptEffort(
    ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>> &&value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      adopt(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
JointTrajectoryPoint::Builder::disownEffort() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool JointTrajectoryPoint::Reader::hasTimeFromStart() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool JointTrajectoryPoint::Builder::hasTimeFromStart() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::Duration::Reader
JointTrajectoryPoint::Reader::getTimeFromStart() const {
  return ::capnp::_::PointerHelpers<::mrp::std::Duration>::get(
      _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::mrp::std::Duration::Builder
JointTrajectoryPoint::Builder::getTimeFromStart() {
  return ::capnp::_::PointerHelpers<::mrp::std::Duration>::get(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::Duration::Pipeline
JointTrajectoryPoint::Pipeline::getTimeFromStart() {
  return ::mrp::std::Duration::Pipeline(_typeless.getPointerField(4));
}
#endif // !CAPNP_LITE
inline void JointTrajectoryPoint::Builder::setTimeFromStart(
    ::mrp::std::Duration::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::Duration>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::Duration::Builder
JointTrajectoryPoint::Builder::initTimeFromStart() {
  return ::capnp::_::PointerHelpers<::mrp::std::Duration>::init(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void JointTrajectoryPoint::Builder::adoptTimeFromStart(
    ::capnp::Orphan<::mrp::std::Duration> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::Duration>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::Duration>
JointTrajectoryPoint::Builder::disownTimeFromStart() {
  return ::capnp::_::PointerHelpers<::mrp::std::Duration>::disown(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool MultiDOFJointTrajectory::Reader::hasHeader() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiDOFJointTrajectory::Builder::hasHeader() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::Header::Reader
MultiDOFJointTrajectory::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers<::mrp::std::Header>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::mrp::std::Header::Builder
MultiDOFJointTrajectory::Builder::getHeader() {
  return ::capnp::_::PointerHelpers<::mrp::std::Header>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::Header::Pipeline
MultiDOFJointTrajectory::Pipeline::getHeader() {
  return ::mrp::std::Header::Pipeline(_typeless.getPointerField(0));
}
#endif // !CAPNP_LITE
inline void
MultiDOFJointTrajectory::Builder::setHeader(::mrp::std::Header::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::Header>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::Header::Builder
MultiDOFJointTrajectory::Builder::initHeader() {
  return ::capnp::_::PointerHelpers<::mrp::std::Header>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MultiDOFJointTrajectory::Builder::adoptHeader(
    ::capnp::Orphan<::mrp::std::Header> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::Header>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::Header>
MultiDOFJointTrajectory::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers<::mrp::std::Header>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MultiDOFJointTrajectory::Reader::hasJointNames() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiDOFJointTrajectory::Builder::hasJointNames() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
MultiDOFJointTrajectory::Reader::getJointNames() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
MultiDOFJointTrajectory::Builder::getJointNames() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MultiDOFJointTrajectory::Builder::setJointNames(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void MultiDOFJointTrajectory::Builder::setJointNames(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
MultiDOFJointTrajectory::Builder::initJointNames(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void MultiDOFJointTrajectory::Builder::adoptJointNames(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
        &&value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
MultiDOFJointTrajectory::Builder::disownJointNames() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool MultiDOFJointTrajectory::Reader::hasPoints() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiDOFJointTrajectory::Builder::hasPoints() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::mrp::trajectory::MultiDOFJointTrajectoryPoint,
                     ::capnp::Kind::STRUCT>::Reader
MultiDOFJointTrajectory::Reader::getPoints() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::MultiDOFJointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      get(_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::mrp::trajectory::MultiDOFJointTrajectoryPoint,
                     ::capnp::Kind::STRUCT>::Builder
MultiDOFJointTrajectory::Builder::getPoints() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::MultiDOFJointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      get(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void MultiDOFJointTrajectory::Builder::setPoints(
    ::capnp::List<::mrp::trajectory::MultiDOFJointTrajectoryPoint,
                  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::MultiDOFJointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::mrp::trajectory::MultiDOFJointTrajectoryPoint,
                     ::capnp::Kind::STRUCT>::Builder
MultiDOFJointTrajectory::Builder::initPoints(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::MultiDOFJointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      init(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
           size);
}
inline void MultiDOFJointTrajectory::Builder::adoptPoints(
    ::capnp::Orphan<::capnp::List<
        ::mrp::trajectory::MultiDOFJointTrajectoryPoint, ::capnp::Kind::STRUCT>>
        &&value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::MultiDOFJointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      adopt(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::mrp::trajectory::MultiDOFJointTrajectoryPoint, ::capnp::Kind::STRUCT>>
MultiDOFJointTrajectory::Builder::disownPoints() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::mrp::trajectory::MultiDOFJointTrajectoryPoint, ::capnp::Kind::STRUCT>>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool MultiDOFJointTrajectoryPoint::Reader::hasTransforms() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiDOFJointTrajectoryPoint::Builder::hasTransforms() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>::Reader
MultiDOFJointTrajectoryPoint::Reader::getTransforms() const {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>>::
      get(_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>::Builder
MultiDOFJointTrajectoryPoint::Builder::getTransforms() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>>::
      get(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MultiDOFJointTrajectoryPoint::Builder::setTransforms(
    ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>::Reader
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>::Builder
MultiDOFJointTrajectoryPoint::Builder::initTransforms(unsigned int size) {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>>::
      init(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
           size);
}
inline void MultiDOFJointTrajectoryPoint::Builder::adoptTransforms(
    ::capnp::Orphan<::capnp::List<::mrp::geometry::Transform,
                                  ::capnp::Kind::STRUCT>> &&value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>>::
      adopt(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<
    ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>>
MultiDOFJointTrajectoryPoint::Builder::disownTransforms() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Transform, ::capnp::Kind::STRUCT>>::
      disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MultiDOFJointTrajectoryPoint::Reader::hasVelocities() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiDOFJointTrajectoryPoint::Builder::hasVelocities() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Reader
MultiDOFJointTrajectoryPoint::Reader::getVelocities() const {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Builder
MultiDOFJointTrajectoryPoint::Builder::getVelocities() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MultiDOFJointTrajectoryPoint::Builder::setVelocities(
    ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Reader
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Builder
MultiDOFJointTrajectoryPoint::Builder::initVelocities(unsigned int size) {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      init(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
           size);
}
inline void MultiDOFJointTrajectoryPoint::Builder::adoptVelocities(
    ::capnp::Orphan<
        ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>> &&value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      adopt(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<
    ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>
MultiDOFJointTrajectoryPoint::Builder::disownVelocities() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool MultiDOFJointTrajectoryPoint::Reader::hasAccelerations() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiDOFJointTrajectoryPoint::Builder::hasAccelerations() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Reader
MultiDOFJointTrajectoryPoint::Reader::getAccelerations() const {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      get(_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Builder
MultiDOFJointTrajectoryPoint::Builder::getAccelerations() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      get(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void MultiDOFJointTrajectoryPoint::Builder::setAccelerations(
    ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Reader
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>::Builder
MultiDOFJointTrajectoryPoint::Builder::initAccelerations(unsigned int size) {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      init(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
           size);
}
inline void MultiDOFJointTrajectoryPoint::Builder::adoptAccelerations(
    ::capnp::Orphan<
        ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>> &&value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      adopt(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
            kj::mv(value));
}
inline ::capnp::Orphan<
    ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>
MultiDOFJointTrajectoryPoint::Builder::disownAccelerations() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::mrp::geometry::Twist, ::capnp::Kind::STRUCT>>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool MultiDOFJointTrajectoryPoint::Reader::hasTimeFromStart() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiDOFJointTrajectoryPoint::Builder::hasTimeFromStart() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::mrp::std::Duration::Reader
MultiDOFJointTrajectoryPoint::Reader::getTimeFromStart() const {
  return ::capnp::_::PointerHelpers<::mrp::std::Duration>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::mrp::std::Duration::Builder
MultiDOFJointTrajectoryPoint::Builder::getTimeFromStart() {
  return ::capnp::_::PointerHelpers<::mrp::std::Duration>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::mrp::std::Duration::Pipeline
MultiDOFJointTrajectoryPoint::Pipeline::getTimeFromStart() {
  return ::mrp::std::Duration::Pipeline(_typeless.getPointerField(3));
}
#endif // !CAPNP_LITE
inline void MultiDOFJointTrajectoryPoint::Builder::setTimeFromStart(
    ::mrp::std::Duration::Reader value) {
  ::capnp::_::PointerHelpers<::mrp::std::Duration>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::mrp::std::Duration::Builder
MultiDOFJointTrajectoryPoint::Builder::initTimeFromStart() {
  return ::capnp::_::PointerHelpers<::mrp::std::Duration>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void MultiDOFJointTrajectoryPoint::Builder::adoptTimeFromStart(
    ::capnp::Orphan<::mrp::std::Duration> &&value) {
  ::capnp::_::PointerHelpers<::mrp::std::Duration>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::mrp::std::Duration>
MultiDOFJointTrajectoryPoint::Builder::disownTimeFromStart() {
  return ::capnp::_::PointerHelpers<::mrp::std::Duration>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

} // namespace trajectory
} // namespace mrp

CAPNP_END_HEADER
